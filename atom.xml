<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://awen123awen.github.io/"/>
  <updated>2022-05-08T16:29:09.131Z</updated>
  <id>https://awen123awen.github.io/</id>
  
  <author>
    <name>又菜又爱玩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://awen123awen.github.io/2022/05/02/javaweb%E5%9F%BA%E7%A1%80/"/>
    <id>https://awen123awen.github.io/2022/05/02/javaweb基础/</id>
    <published>2022-05-01T16:29:44.663Z</published>
    <updated>2022-05-08T16:29:09.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h1><p>本笔记记录了有关于Junit单元测试 ，注解， mysql的相关知识</p><span id="more"></span><h2 id="内容安排"><a href="#内容安排" class="headerlink" title="内容安排"></a>内容安排</h2><ul><li>数据库</li><li>web核心课程</li></ul><p>后期学习路径:</p><ul><li>SSM框架知识: 简化wen开发的经典框架</li><li>SpringBoot: 简化Spring开发的框架</li><li>各种中间件技术:</li><li>容器技术: Docker</li></ul><h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><ul><li>测试分类:<ul><li>黑盒测试</li><li>白盒测试</li></ul></li></ul><p>Junit使用: 白盒测试</p><ul><li>定义一个测试类(测试用例)</li><li>定义测试方法</li><li>给方法加@Test</li><li>导入junit依赖环境</li></ul><p>判定结果:</p><ul><li>红色为失败, 绿色为成功</li><li>一般我们会使用断言操作来处理结果 <code>Assert.assertEquals(期望的结果, result);</code></li></ul><p>补充: 两个注解</p><ul><li>@Before 修饰的方法在测试方法之前被自动执行</li><li>@After 修饰的方法在测试方法之后被自动执行</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li><p>框架: 半成品软件, 可以在框架的基础上进行软件开发, 简化编码</p></li><li><p>反射: 将类的各个组成部分封装为其他对象, 就是反射机制</p><ul><li><p>好处:</p><ul><li>在程序的运行过程中对对象进行操作</li><li>可以解耦, 提高程序的可扩展性</li></ul></li></ul></li></ul><ul><li><p>获取class对象的方式</p><ul><li>Class.forName(“全类名”)：将字节码文件加载进内存, 返回Class对象</li><li>类名.Class : 通过类名的属性Class获取</li><li>对象.getClass(): getClass()方法在Object类中定义</li></ul><p>同一个字节码文件(*.class)在一次程序运行过程中,只会被加载一次,无论通过那种方式获取的Class对象,都是同一个.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RelectDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//* Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存, 返回Class对象</span></span><br><span class="line"><span class="comment">//* 类名.Class : 通过类名的属性Class获取</span></span><br><span class="line"><span class="comment">//* 对象.getClass(): getClass()方法在Object类中定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.Class.forName(&quot;全类名&quot;)</span></span><br><span class="line">Class cls1= Class.forName(<span class="string">&quot;cn.itcast.domain.Person&quot;</span>);</span><br><span class="line">System.out.println(cls1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.类名.class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Person.class;</span><br><span class="line">System.out.println(cls2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.对象.getClass()</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;a&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">cls3</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">System.out.println(cls3);</span><br><span class="line"></span><br><span class="line">System.out.println(cls1==cls2);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>使用class对象功能<ul><li>获取功能(详见api文档):<ul><li>获取成员变量们<ul><li>Field[]  getFields( )获取所有Public修饰的成员变量</li><li>Field getField(String name)获取名字</li><li>Field[]  getDeclatedFields( )</li><li>Field getDeclaredField(String name)</li></ul></li><li>获取构造方法们Constructor</li><li>获取成员方法们Methods</li><li>获取类名Name</li></ul></li></ul></li></ul><p>Field: 成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Person;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//获取Person 的class 变量</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">personClass</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//Field[] getFields()</span></span><br><span class="line">Field[] fields =personClass.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field field: fields) &#123;</span><br><span class="line">System.out.println(field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">a</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">//获取成员变量a的值</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> a.get(p);</span><br><span class="line"></span><br><span class="line">System.out.println(value);<span class="comment">//字符串的值默认为null</span></span><br><span class="line"></span><br><span class="line">a.set(p, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Field[] getDeclaredFields() 获取所有的成员变量,不考虑修饰符</span></span><br><span class="line">Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field declaredField : declaredFields) &#123;</span><br><span class="line">System.out.println(declaredField);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Field getDeclaredField(String name)</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">d</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="comment">//忽略访问权限修饰符的安全检查</span></span><br><span class="line">d.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> d.get(p);</span><br><span class="line">System.out.println(value2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>定义：从JDK5开始,Java增加对元数据的支持，也就是注解，注解与注释是有一定区别的，可以把注解理解为代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p></blockquote><p>简单来说：</p><p> 概念：说明程序的，给计算机看</p><p> 注释：用文字描述程序，给程序员看</p><p>使用注解：@注解名称</p><p>作用分类：</p><p>1.编写文档：通过代码里标识的注解生成文档 【生成文档doc文档】</p><p>2.代码分析：通过代码里标识的注解对代码进行分析 【使用反射】</p><p>3.编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查 【Override】</p><h4 id="JDK中预定义的一些注解"><a href="#JDK中预定义的一些注解" class="headerlink" title="JDK中预定义的一些注解"></a>JDK中预定义的一些注解</h4><p>@Override：检测被该注解标注的方法是否是继承自父类(接口)</p><p>@Deprecated：给注解标注的内容，表示已过时</p><p>@SuppressWarnings：压制警告，一般传递参数all</p><p> 例如：@SuppressWarnings(“all”)</p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>格式：</p><ul><li><p>元注解</p></li><li><p>public @interface 注解名称{</p><p> 属性列表;</p><p>}</p></li></ul><p>本质：就是一个接口，该接口默认继承Annotation接口</p><p> public interface MyAnno extends java.lang.annotation.Annotation {}</p><p>属性：接口中可以定义的抽象方法</p><p> 要求：</p><p> 1.属性的返回值类型有下列取值</p><p> 基本数据类型</p><p> String</p><p> 枚举</p><p> 注解</p><p> 以上类型的数组</p><p> 2.定义了属性，使用时需要给属性赋值</p><p> 1.如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值</p><p> 2.如果只有一个属性需要赋值，并且属性名称是value，则可省略value，直接定义值即可</p><p> 3.数组赋值时，值使用{}包裹，如果数组中只有一个值，则{}省略</p><p><strong>元注解：用于描述注解的注解</strong></p><ul><li><p>@Target：描述注解能够作用的位置</p><p> ElementType取值：</p><p> TYPE：可以作用在类上</p><p> METHOD：可以作用在方法上</p><p> FIELD：可以作用在成员变量上</p></li><li><p>@Retention：描述注解被保留阶段</p><p> @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</p></li><li><p>@Documented：描述注解是否被抽取到API文档</p></li><li><p>@Inherited：描述注解是否被子类继承</p></li></ul><h4 id="在程序中使用-解析-注解：获取注解中定义的属性值"><a href="#在程序中使用-解析-注解：获取注解中定义的属性值" class="headerlink" title="在程序中使用(解析)注解：获取注解中定义的属性值"></a>在程序中使用(解析)注解：获取注解中定义的属性值</h4><p>1.获取注解定义的位置的对象 （Class，Method，Field）</p><p>2.获取指定的注释</p><p> getAnnotation(Class),其实就是在内存中生成一个该注解接口的子类实现对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//自动默认完成的</span><br><span class="line">public class ProImpl implements Pro&#123;</span><br><span class="line">public String className()&#123;</span><br><span class="line">return &quot;cn.itcast.annotation.Demo1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public String methodName()&#123;</span><br><span class="line">return &quot;show&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.调用注解中的抽象方法获取配置的属性值</p><p>小结：</p><p>1.多数时候会使用注解，而不是自定义注解</p><p>2.使用者：</p><ul><li>编译器</li><li>给解析程序用</li></ul><p>3.注解不是程序的一部分，可理解为注解是一个标签</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="DDL-操作数据库-创建-amp-查询"><a href="#DDL-操作数据库-创建-amp-查询" class="headerlink" title="DDL 操作数据库 创建&amp;查询"></a>DDL 操作数据库 创建&amp;查询</h3><h4 id="操作数据库-CRUD"><a href="#操作数据库-CRUD" class="headerlink" title="操作数据库:CRUD"></a>操作数据库:CRUD</h4><ul><li><p>C(creat): 创建</p></li><li><p>R(Retrieve):查询</p><ul><li><p>查询所有数据库的名称:</p><ul><li><p>show databases</p></li><li><p>create database if not exists db4 </p><p>数据库名称号</p></li><li><p>create database 数据库名称 character set 字符集名;</p></li></ul></li><li><p>查询某个数据库的字符集:查询某个数据库的创建语句</p><p>​    show create database 数据库名称</p></li></ul></li><li><p>U(Update):修改</p><ul><li>修改数据库的字符集<ul><li>alter database db3 character set utf8;</li></ul></li></ul></li><li>D(Delete):删除<ul><li>删除数据库<ul><li>drop database 数据库名称;</li></ul></li></ul></li><li>使用数据库<ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<ul><li>use 数据库名称</li></ul></li></ul></li></ul><p>​        </p><h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><ul><li><p>C:创建</p><ul><li><p>create table 表名(</p><p>​        列名1 数据类型1,</p><p>​        列名2 数据类型2,</p><p>); </p></li><li><p>create 表名 like 被复制的表名;</p></li><li><p>mysql中的数据类型</p><ul><li><p>int : 整数类型</p><ul><li><p>age int,</p></li><li><p>double: 小数类型</p><ul><li>score double(5,2)</li></ul></li><li><p>date : 日期,只包含年月日yyyy-MM-dd</p></li><li><p>datetime : 日期,包含年月日时分秒 yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型 包含年月日时分秒</p><p>yyyy-MM-dd HH:mm:ss</p><ul><li><p>如果将来不给这个字段赋值,或者赋值为null,则默认使用当前的系统时间,来自动赋值</p></li><li><p>name varchar(20):姓名最大20个字符</p></li></ul></li><li><p>更多数据类型可以查询<a href="http://www.imooc.com/wiki/mysqllesson/datatype1.html">基本类型</a></p></li></ul></li></ul></li></ul></li></ul><ul><li><p>R:查询</p><ul><li>查询某个数据库中所有的表的名称<ul><li>show tables;</li></ul></li><li>查询表的结构<ul><li>desc:表名//显示这个表的具体信息</li></ul></li></ul></li><li><p>U:修改</p><ul><li><p>修改表名</p><ul><li>alter table 表名 rename to 新的表名;</li></ul></li><li><p>修改表的字符集</p><ul><li>alter table 表名 character set 字符集名称;</li></ul></li><li><p>添加一列</p><ul><li>alter table 表名 add 列名 数据类型;</li></ul></li><li>修改列名称 类型<ul><li>alter table 表名 change 列名 新列名 新数据类型;</li><li>alter table 表名 modify 列名 新数据类型;</li></ul></li><li>删除列<ul><li>alter table 表名 drop 列名;</li></ul></li></ul></li><li><p>D:删除</p><ul><li>drop table if exists 表名;</li></ul></li></ul><h2 id="客户端图形化工具-SQLYog"><a href="#客户端图形化工具-SQLYog" class="headerlink" title="客户端图形化工具: SQLYog"></a>客户端图形化工具: SQLYog</h2><h3 id="DML-增删改表中的数据"><a href="#DML-增删改表中的数据" class="headerlink" title="DML: 增删改表中的数据"></a>DML: 增删改表中的数据</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><ul><li>添加数据:<ul><li>语法:<ul><li>insert into 表名(列名1,列名2,….,列名3) values(值1, 值2, …,值n);</li></ul></li><li>注意:<ul><li>列名和值要一一对应</li><li>如果表名后,不定义列名,则默认给所有列添加值</li></ul></li></ul></li></ul><ul><li>删除数据:<ul><li>语法<ul><li>delete from 表名 [where 条件 ]</li></ul></li><li>注意<ul><li>如果不加条件,则删除表中所有数据</li><li>如果要删除所有的记录<ul><li>不推荐delete from</li><li>truncate table效率更高</li></ul></li></ul></li></ul></li></ul><ul><li>修改数据:<ul><li>语法:<ul><li>update 表名 set 列名1= 值1, 列名2 = 值2,… [where 条件];</li></ul></li><li>注意:<ul><li>如果不加任何条件,则会将表中所有数据全部修改</li></ul></li></ul></li></ul><h3 id="DQL-查询表中的记录"><a href="#DQL-查询表中的记录" class="headerlink" title="DQL: 查询表中的记录"></a>DQL: 查询表中的记录</h3><ul><li>select*from 表名; 查表中所有的数据</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h4><ul><li>select:<ul><li>字段列表</li></ul></li><li>from<ul><li>表名列表</li></ul></li><li>where<ul><li>条件列表</li></ul></li><li>group by<ul><li>分组字段</li></ul></li><li>having<ul><li>分组之后的条件</li></ul></li><li>order by<ul><li>排序</li></ul></li><li>limit<ul><li>分页限定</li></ul></li></ul><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><ul><li><p>多个字段的查询    </p><ul><li>select 字段名1, 字段名2… from 表名;</li><li>注意<ul><li>如果查询所有字段,则可以使用*来替代字段列表</li></ul></li></ul></li><li><p>去除重复</p><ul><li><p>distinct</p></li><li><p><code>`</code>mysql<br>SELECT DISTINCT 列名, … FROM 表名;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 计算列</span><br><span class="line"></span><br><span class="line">  * 一般可以使用四则运算计算一些列的值.</span><br><span class="line"></span><br><span class="line">    一般只会进行数值型的计算</span><br><span class="line"></span><br><span class="line">    ```mysql</span><br><span class="line">    SELECT id, productName, salePrice * disCount From product;</span><br></pre></td></tr></table></figure></li><li><p>ifnull(表达式1:哪个字段需要判断是否为null)</p></li><li><p>如果该字段为null后的替换值.</p></li></ul></li><li><p>起别名</p><ul><li>as:as可以省略</li></ul></li></ul><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li><p>where字句后跟条件</p></li><li><p>运算符</p><ul><li><p>大于号,小于号,小于等于号,大于等于号,等于号,&lt;&gt;(可以看做不等号)</p></li><li><p>between…and</p><ul><li><code>`</code>mysql<br>// 查询零售价不在 300 - 400 之间的货品信息<br>SELECT * FROM product WHERE NOT salePrice BETWEEN 300 AND 400;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* in</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    // 查询分类编号为 2，4 的所有货品的 id，货品名称</span><br><span class="line">    SELECT id, productName FROM product WHERE dir_id IN (2,4);</span><br><span class="line">    // 查询分类编号不为 2, 4 的所有货品的 id，货品名称</span><br><span class="line">    SELECT id, dir_id, productName FROM product WHERE NOT dir_id IN (2,4);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>like</p><ul><li><p>_:单个任意字符</p></li><li><p>%:多个任意字符</p></li><li><p><code>`</code>mysql<br>// 查询货品名称以 罗技M9<em> 结尾的所有货品信息，这里的 </em> 表示一个任意字符，它不具备任何意义，只是我出于题目需要才这样写，便于你理解而已<br>SELECT * FROM product WHERE productName LIKE “%罗技M9_”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  * is null</span><br><span class="line">  * add 或 &amp;&amp;</span><br><span class="line">  * or 或||</span><br><span class="line">  * not  或 !</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### DQL:查询语句</span><br><span class="line"></span><br><span class="line">#### 排序查询</span><br><span class="line"></span><br><span class="line">* 语法:order by 子句</span><br><span class="line"></span><br><span class="line">  * order by 排序字段1 排序方式1, 排序字段2 排序方式2...</span><br><span class="line"></span><br><span class="line">* 排序方法:</span><br><span class="line"></span><br><span class="line">  * ASC:升序</span><br><span class="line"></span><br><span class="line">    * </span><br><span class="line"></span><br><span class="line">    ```mysql</span><br><span class="line">    // 查询 id，货品名称，分类编号，零售价 按分类编号降序排序，如果分类编号相同再按零售价升序排序</span><br><span class="line">    SELECT * FROM product ORDER BY dir_id DESC, salePrice ASC;</span><br><span class="line"></span><br><span class="line">  * DESC:降序</span><br><span class="line"></span><br><span class="line">    * ``` mysql</span><br><span class="line">      # 查询分组条件之外的值，拼接成字符串</span><br><span class="line">      select theme_id, group_concat(dest_id) dest_id, group_concat(dest_name) dest_name from strategy group by theme_id having theme_id = 1</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">   * 注意:</span><br><span class="line">     * 如果有多个排序条件会先按照第一个排序方法排序,再按照第二种方法整理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 聚合函数</span><br><span class="line"></span><br><span class="line">* count:计算个数</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    select count(id) from db1;</span><br><span class="line"></span><br><span class="line">* max:计算最大值</span><br><span class="line"></span><br><span class="line">* min:计算平均值</span><br><span class="line"></span><br><span class="line">* sum:计算和</span><br><span class="line"></span><br><span class="line">* avg:计算平均值</span><br><span class="line"></span><br><span class="line">​      注意在进行聚合计算排除null值</span><br><span class="line"></span><br><span class="line">解决方法:</span><br><span class="line"></span><br><span class="line">* 选择不包含非空的列进行计算</span><br><span class="line">* ifnull函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 分组查询</span><br><span class="line"></span><br><span class="line">* 语法: group by 分组字段;</span><br><span class="line">*  注意:</span><br><span class="line">  * 分组之后查询的字段:分组字段,聚合函数</span><br><span class="line">  * where和having的区别</span><br><span class="line">    * where 在分组之前进行限定,如果不满足条件,则不参与分组.having在分组之后进行限定,如果不满足结果,则不会被查询出来</span><br><span class="line">    * where 后不可以跟聚合函数,having可以进行聚合函数的判断</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 分页查询</span><br><span class="line">  * 语法:limit 开始的索引,每页查询的条数;</span><br><span class="line">  * 分页操作是一个&quot;方言&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 约束</span><br><span class="line"></span><br><span class="line">* 概念:对表中的数据进行限定,保证数据的正确性,有效性和完整性</span><br><span class="line">* 分类:</span><br><span class="line">  * 主键约束:primary key</span><br><span class="line">  * 非空约束: not null</span><br><span class="line">  * 唯一约束:unique</span><br><span class="line">  * 外键约束:foreigh key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 非空约束: not null</span><br><span class="line"></span><br><span class="line">* 创建表时添加约束:</span><br><span class="line"></span><br><span class="line">  * ``` mysql</span><br><span class="line">    name varchar(20) not null;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>创建表完后,添加非空约束</p><ul><li><code>`</code>mysql<br>alter table stu modify name varchar(20) not null;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 删除name的非空约束</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    alter table stu modify name vatchar(20);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束:unique"></a>唯一约束:unique</h3><ul><li><p>某一列的值不能为重复</p></li><li><p>唯一约束可以有null,但是只能有一条记录为null</p></li><li><p>在创建表时,条件唯一约束</p><ul><li>列名称 数据类型 unique</li></ul></li><li><p>删除唯一约束</p><ul><li><code>`</code>mysql<br>alter table stu drop index phone_number;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 在表创建完后,添加唯一约束</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    alter table stu modify phone_number varchar(20) unique;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javaweb&quot;&gt;&lt;a href=&quot;#javaweb&quot; class=&quot;headerlink&quot; title=&quot;javaweb&quot;&gt;&lt;/a&gt;javaweb&lt;/h1&gt;&lt;p&gt;本笔记记录了有关于Junit单元测试 ，注解， mysql的相关知识&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java核心技术进阶</title>
    <link href="https://awen123awen.github.io/2022/04/23/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    <id>https://awen123awen.github.io/2022/04/23/java核心技术进阶/</id>
    <published>2022-04-22T17:30:22.379Z</published>
    <updated>2022-04-24T16:58:05.489Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章介绍了Maven,测试,一些基本的语法糖和lambda表达式的用法</p><p> <em><span id="more"></span></em></p><!--more--><h1 id="Java核心技术进阶"><a href="#Java核心技术进阶" class="headerlink" title="Java核心技术进阶"></a>Java核心技术进阶</h1><p> <em><!--more--></em></p><!--more--><h2 id="第一章-Maven"><a href="#第一章-Maven" class="headerlink" title="第一章 Maven"></a>第一章 Maven</h2><p>创建Maven项目的两种方法:</p><ul><li><p>1.直接创建Maven项目</p></li><li><p>2.先创建Java Project</p><p>再Convert to Maven Project</p></li></ul><p>其中Group id与Artifact id必须填</p><p>添加需要的commons math的依赖</p><p>完成后先build maven</p><p>再run Java Application</p><h2 id="第二章-单元测试与Junit"><a href="#第二章-单元测试与Junit" class="headerlink" title="第二章 单元测试与Junit"></a>第二章 单元测试与Junit</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="单元测试和集成测试"><a href="#单元测试和集成测试" class="headerlink" title="单元测试和集成测试"></a>单元测试和集成测试</h4><p>分别对应一个方法是否正确以及一个项目是否正确.</p><h4 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h4><p>JUnit是一个Java语言的单元测试框架</p><p>可以直观的看到大量的测试样例看到发生错误的测试用例</p><h1 id="Java核心技术高阶"><a href="#Java核心技术高阶" class="headerlink" title="Java核心技术高阶"></a>Java核心技术高阶</h1><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>语法糖，又称糖衣语法，是英国计算机科学家发明的一个术语，指在计算机语言中加入某种语法，这种语法对语言的功能并没有影响，但是方便了程序员的操作，并且增加了代码的可读性，减少了出错的机会。</p><ul><li>语法糖使得程序员更容易编写程序,更清晰准确表达业务逻辑</li><li>语法糖不仅仅是语法的转换,也包括一些小的改进</li></ul><h3 id="for-each-和枚举"><a href="#for-each-和枚举" class="headerlink" title="for-each 和枚举"></a>for-each 和枚举</h3><h4 id="for与for-each"><a href="#for与for-each" class="headerlink" title="for与for-each"></a>for与for-each</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">double</span> item : nums)<span class="comment">//其中item是指代变量,nums是数组名</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点:</p><ul><li>for-each语法相对更简洁</li><li>for-each可以避免数组越界(遍历)</li></ul><p>缺点:</p><ul><li>for 可以删除元素,for-each不可以删除/替换元素</li><li>for-each遍历的时候,是不知道当前元素的具体位置索引(索引变量i)</li><li>for-each只能正向遍历,不能反向遍历</li><li>for-each不能同时遍历两个集合</li></ul><p>for与for-each性能接近</p><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><ul><li><p>变量的取值只在一个有限的集合内</p><ul><li>如性别, 星期几, 颜色等</li></ul></li><li><p>Java5推出enum类型</p><ul><li><p>enum关键字声明枚举类,且都是Enum的子类</p></li><li><p>enum内部有多少个值,<strong>就有多少个实例对象</strong></p></li><li><p>不能直接new枚举类对象</p></li><li><p><code>`</code>java<br>package demo;</p></li></ul></li></ul><pre><code>public class test &#123;    public static void main(String[] args) &#123;        Size s1 = Size.SMALL;        Size s2 = Size.SMALL;        Size s3 = Size.SMALL;        System.out.println(s1 == s2); //true        System.out.println(s1 == s3); //false    &#125;&#125;enum Size &#123;    SMALL,MEDIUM,LARGE,EXTRA_LARGE;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* Java的enum类型</span><br><span class="line"></span><br><span class="line">  * 除了枚举的内容, 还可以添加属性/构造函数/方法</span><br><span class="line"></span><br><span class="line">  * 构造函数只能是package-private(default,只能在包内调用)或者private内部调用</span><br><span class="line"></span><br><span class="line">    ```JAVA</span><br><span class="line">    public class FruitTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    Fruit a1 = Fruit.APPLE;</span><br><span class="line">    System.out.println(&quot;Price is &quot; + a1.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    enum Fruit</span><br><span class="line">    &#123;</span><br><span class="line">    APPLE(10), ORANGE(5);</span><br><span class="line">    private int price;</span><br><span class="line">    </span><br><span class="line">    Fruit(int price) &#123;</span><br><span class="line">    this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int getPrice() &#123;</span><br><span class="line">    return this.price;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>所有的enum类型都是Enum的子类,也继承了相应的方法<ul><li>ordinal()返回枚举值所在的索引位置,从0开始</li><li>compareTo()比较两个枚举值的索引位置大小</li><li>toString()返回枚举值的字符串表示</li><li>valueOf()将字符串初始化为枚举对象</li><li>values()返回所有枚举值</li></ul></li></ul><h3 id="不定项参数与静态导入"><a href="#不定项参数与静态导入" class="headerlink" title="不定项参数与静态导入"></a>不定项参数与静态导入</h3><h4 id="不定项参数"><a href="#不定项参数" class="headerlink" title="不定项参数"></a>不定项参数</h4><p>普通函数的形参列表是固定个数/类型.顺序</p><p>不定项参数功能也叫可变参数功能</p><ul><li>类型后面加3个.,如int…/double…/String…</li><li>可变参数,本质上是一个数组</li></ul><p>重载的优先级规则:</p><ul><li><p>固定参数的办法,比可变参数方法的优先级更高</p></li><li><p>调用语句,同时与两个带可变参数的方法匹配,则报错</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">print();</span><br><span class="line">print(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">print(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">print(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        System.out.println(args.length);</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当只有一个参数时，本方法优先级更高</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span></span><br><span class="line">&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;I am another method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误：一个方法不可以有多个可变参数</span></span><br><span class="line"><span class="comment">//public static void print(String... args, int... irgs) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//错误：一个调用语句不能同时有2个带可变参数的方法适配</span></span><br><span class="line"><span class="comment">//public static void print(String s1, String... args)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h4><p>import 导入程序所需要的类(相当于include)</p><p>import static导入一个类的静态方法和静态变量,可以避免在使用静态方法和静态对象时带类名.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.pow;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">3</span>, b=<span class="number">4</span>, c=<span class="number">0</span>;</span><br><span class="line">c = (<span class="type">int</span>) Math.sqrt(pow(a,<span class="number">2</span>)+pow(b,<span class="number">2</span>));</span><br><span class="line">c = (<span class="type">int</span>) Math.sqrt(Math.pow(a,<span class="number">2</span>)+Math.pow(b,<span class="number">2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;c is &quot;</span> + c);</span><br><span class="line">System.out.println(<span class="string">&quot;c is &quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点:</p><ul><li>尽量不使用*通配符,不滥用,最好具体到静态变量或方法,避免名字冲突</li><li>静态方法名具有明确特征,如有重名,需要补充类名</li></ul><h3 id="自动拆箱和装箱"><a href="#自动拆箱和装箱" class="headerlink" title="自动拆箱和装箱"></a>自动拆箱和装箱</h3><p>作用:简化基本类型和对象转换的写法</p><ul><li>基本类型: boolean/byte/char/int/short/long/float/double</li><li>对象:Boolean/Byte/Character/Integer/Short/Long/Float/Double</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">//自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">obj2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> obj1;     <span class="comment">//自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> obj1.intValue();</span><br><span class="line"><span class="comment">//减轻了转换类型的写法</span></span><br></pre></td></tr></table></figure><ul><li><p>装箱和拆箱是编译器的工作,在class中已经添加转换,虚拟机中没有自动装箱和拆箱的语句</p></li><li><p>==:基本类型是内容相同,对象是内存是否在同一区域(可以类比c++中的指针是否相同)</p></li><li><p>基本类型没有空值,对象有null</p></li><li><p>当一个基础数据类型与封装类进行== , + , - , * , / 运算时,会将封装类进行拆箱,对基础数据类型进行</p><p>计算(对象不进行计算)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"><span class="type">Long</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="number">2000L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">a5</span> <span class="operator">=</span> <span class="number">2000L</span>;</span><br><span class="line"><span class="comment">//Integer 和 Long 都继承自Object</span></span><br><span class="line"></span><br><span class="line">System.out.println(a1 == a2);  <span class="comment">//拆箱再进行数值比较</span></span><br><span class="line">System.out.println(a3 == (a1 + a2));  <span class="comment">//拆箱再进行数值比较</span></span><br><span class="line">System.out.println(a4 == (a1 + a2));  <span class="comment">//拆箱再进行数值比较</span></span><br><span class="line">System.out.println(a5 == (a1 + a2));  <span class="comment">//拆箱再进行数值比较</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(a3.equals(a1+a2)); <span class="comment">//equals要求同类，且内容相同,a1+a2转化为Integer</span></span><br><span class="line">System.out.println(a4.equals(a1+a2)); <span class="comment">//a4为Long型,而a1+a2转化为Integer,其返回值为false</span></span><br><span class="line">System.out.println(a4.equals((<span class="type">long</span>) (a1+a2))); <span class="comment">//long自动转化为Long</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(a3 == a4); //不同类型不能比较,比较内存区域是否相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数类型用二进制赋值"><a href="#整数类型用二进制赋值" class="headerlink" title="整数类型用二进制赋值"></a>整数类型用二进制赋值</h3><ul><li><p>避免二进制计算,直接把二进制数赋值给变量</p></li><li><p>使用下划线成家数字的可读性(编译器会自动将下划线去掉)</p><ul><li>下划线前后必须有数字 </li><li>二/八/十/十六进制均可</li></ul></li></ul><h3 id="接口的默认方式"><a href="#接口的默认方式" class="headerlink" title="接口的默认方式"></a>接口的默认方式</h3><p>在之前的学习中,接口的方法都是<strong>没有实现的,公开的</strong></p><p>为给lamda表达式提供支持,在这里介绍默认方法/静态方法(带实现)接口</p><h4 id="接口的默认方法"><a href="#接口的默认方法" class="headerlink" title="接口的默认方法:"></a>接口的默认方法:</h4><ul><li><p>用default关键字标注,其他的定义和普通函数一样</p><ul><li><p><code>`</code>JAVA<br>public interface Animal {</p><pre><code>public default void move()&#123;    System.out.println(&quot;I can move.&quot;);&#125;</code></pre><p>}</p><p>public interface LandAnimal extends Animal {</p><pre><code>public default void move()&#123;    System.out.println(&quot;I can move on land.&quot;);&#125;</code></pre><p>}</p><p>public class Lion implements LandAnimal{</p><pre><code>public static void main(String[] args) &#123;    new NewLion().move();&#125;public void move()&#123;    System.out.println(&quot;I can move fast.&quot;);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 默认方法不能重写Object中的方法</span><br><span class="line"></span><br><span class="line">  * ```JAVA</span><br><span class="line">    public default String toString()</span><br><span class="line">    &#123;</span><br><span class="line">    return &quot;aaa&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类可以继承/重写父接口的默认方法</p></li><li>接口可以继承/重写父接口的默认方法</li><li>当父类和父接口都有同名同参数默认方法,子类继承父类的默认方法(不会调用父接口里的方法)</li><li>子类实现了两个接口(均有同名同参数的默认方法),那么编译失败,必须在子类中重写这个default方法</li><li>可以代代相传</li></ul></li></ul><h4 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法:"></a>接口的静态方法:</h4><ul><li>该静态方法属于本接口的,不属于子类/子接口</li><li>子类(子接口)没有继承该静态方法,只能通过所在的接口名来调用,没有向下传的功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StaticAnimal</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I can move&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StaticLandAnimal</span> <span class="keyword">extends</span> <span class="title class_">StaticAnimal</span> &#123;</span><br><span class="line"><span class="comment">//也继承不到StaticAnimal的move方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticBird</span> <span class="keyword">implements</span> <span class="title class_">StaticAnimal</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">StaticAnimal.move();</span><br><span class="line">StaticLandAnimal.move(); <span class="comment">//error</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">StaticBird</span>().move(); <span class="comment">//error</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的私有方法"><a href="#接口的私有方法" class="headerlink" title="接口的私有方法:"></a>接口的私有方法:</h4><ul><li>解决的了多个默认方法/静态方法的内容重复问题</li><li>私有方法属于本接口,只在本接口内使用,不属于子类/子接口</li><li>子类没有继承该私有方法,也无法调用</li><li>调用私有方法可以被静态/默认方法调用,非静态私有方法被默认方法调用</li></ul><h4 id="接口与抽象类比较"><a href="#接口与抽象类比较" class="headerlink" title="接口与抽象类比较"></a>接口与抽象类比较</h4><ul><li><p>相同点</p><ul><li>都是抽象的,都不能被实例化,既不能被new</li><li>都可以有实现方法</li><li>都可以不需要继承者实现所有的方法</li></ul></li><li><p>不同点</p><ul><li><p>抽象类最多只能继承一个,接口可以实现多个</p></li><li><p>接口的变量默认是public static final, 且必须有初值, 子类不能修改;</p><p>而抽象类的变量默认是default, 子类可以继承修改</p></li><li><p>接口没有构造函数, 抽象类有构造函数</p></li><li><p>接口没有main函数,抽象类可以有main函数</p></li><li><p>接口有public/default/private 的方法</p><p>抽象类有public/private/protected不用写关键字的(default)方法</p><p>default需要谨慎使用</p></li></ul></li></ul><h3 id="try-with-resouce"><a href="#try-with-resouce" class="headerlink" title="try-with-resouce"></a>try-with-resouce</h3><ul><li>程序如果打开外部资源,那么在使用后需要正确关闭</li><li><p>考虑异常因素,Java提供try-catch-fanally进行保证</p></li><li><p>原理: 资源对象实现AutoCloseable接口, 即实现close方法</p></li></ul><h3 id="var类型"><a href="#var类型" class="headerlink" title="var类型"></a>var类型</h3><ul><li>Java以前一直是一种强类型的程序语言<ul><li>每个变量在定义的时候就确定了类型</li><li>类型固定了,就不能更改了</li></ul></li><li>后续推出的var:局部变量<strong>判断</strong><ul><li>避免信息冗余,对齐变量名,方便阅读</li><li><strong>本质上还是强类型语言,编译器负责推断类型,并写入字节码文件,因此推断后不能更改</strong></li><li>真正的弱语言,JavaScript.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">0.25f</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">URL</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://github.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">0.25</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://github.com/&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="var的限制"><a href="#var的限制" class="headerlink" title="var的限制"></a>var的限制</h4><ul><li>可以用在局部变量上,非类成员变量</li><li>可以用在for/for-each循环中</li><li>声明时必须初始化</li><li>不能用在方法,形参和返回类型</li><li>大面积滥用会使代码整体的阅读性变差(需要分别到底哪个变量是哪个类型)</li><li>var只在编译时起作用,没有在字节码中引入新的内容,也没有专门的JVM指令处理var</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b0;              <span class="comment">//error,没有初始化</span></span><br><span class="line">b3 = <span class="number">5</span>;              <span class="comment">//error,改变了b3的类型</span></span><br><span class="line"><span class="keyword">var</span> b5=<span class="number">5</span>,b6=<span class="number">6</span>,b7=<span class="number">7</span>;  <span class="comment">//error,不能写为复合语句</span></span><br><span class="line"><span class="keyword">var</span> b8=<span class="literal">null</span>;         <span class="comment">//error,无法推断出b8的类型</span></span><br><span class="line"><span class="type">var</span> <span class="variable">nums2</span> <span class="operator">=</span> &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;  <span class="comment">//error无法推断数组内的元素类型</span></span><br></pre></td></tr></table></figure><h3 id="switch-多分支选择语句"><a href="#switch-多分支选择语句" class="headerlink" title="switch,多分支选择语句"></a>switch,多分支选择语句</h3><p>在各种语言中都存在switch语句</p><p>在Java中,switch支持的类型有: byte/Byte,short/Short,int/Integer,char/Character</p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>Lambda表达式是Java SE 8中一个重要的新特性。lambda表达式允许你通过表达式来代替功能接口。 lambda表达式就和方法一样,它提供了一个正常的参数列表和一个使用这些参数的主体(body,可以是一个表达式或一个代码块)。 Lambda 表达式可以看作是一个匿名函数。</p><p>面向过程程序语言: 参数传递是基本类型的变量</p><ul><li>面向对象语言:<ul><li>传递基本类型的变量</li><li>传递对象变量</li></ul></li><li>传递方法/代码块(函数式程序语言设计)<ul><li>刚开始,Java为了简单性,一致性,拒绝本功能</li><li>为了市场和技术需要, Java 8开始, 支持此项功能, 提出Java的Lambda表达式实现</li></ul></li><li>在计算机编程中,lambda表达式通常用来表示一个匿名函数<ul><li>lambda表达式可以当作参数,传递给其他高阶函数</li></ul></li></ul><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><p><strong>基本语法: (parameters) -&gt; expression 或 (parameters) -&gt;{ statements; }</strong></p><ul><li><p>1.paramaters：类似方法中的形参列表，这里的参数是函数式接口里的参数。这里的参数不需要声明类型.</p></li><li><p>2.-&gt;：可理解为“被用于”的意思</p></li><li><p>3.方法体：可以是表达式也可以代码块,是函数式接口里方法的实现。代码块可返回一个值或者什么都不反回,这里的代码块等同于方法的方法体。如果是表达式,也可以返回一个值或者什么都不反回。</p></li><li><p><code>`</code>java<br>// 1. 不需要参数,返回值为 2<br>() -&gt; 2</p><p>// 2. 接收一个参数(数字类型),返回其2倍的值<br>x -&gt; 2 * x</p><p>// 3. 接受2个参数(数字),并返回他们的和<br>(x, y) -&gt; x + y</p><p>// 4. 接收2个int型整数,返回他们的乘积<br>(int x, int y) -&gt; x * y</p><p>// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)<br>(String s) -&gt; System.out.print(s)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lambda表达式性质</span><br><span class="line"></span><br><span class="line">* 类似于匿名类,一个没有名字的方法</span><br><span class="line"></span><br><span class="line">* 参数,箭头,表达式语句</span><br><span class="line"></span><br><span class="line">* 可以忽略写参数类型</span><br><span class="line"></span><br><span class="line">* **坚决不声明返回值类型** </span><br><span class="line"></span><br><span class="line">  * 参数与返回值类型会被编译器判断出来</span><br><span class="line"></span><br><span class="line">  * 如果只在某几个分支有返回值,这样是不合法的</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    Adder c2 =</span><br><span class="line">        x -&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        if(x&gt;0)</span><br><span class="line">                return x+1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>没有public/protected/private/static/final等修饰符</p></li><li><p>单句表达式,将直接返回值,不用大括号</p></li><li><p>带ruturn语句算多句,必须用大括号</p></li></ul><h3 id="lambda应用过程-函数式接口"><a href="#lambda应用过程-函数式接口" class="headerlink" title="lambda应用过程 函数式接口"></a>lambda应用过程 函数式接口</h3><p>Lambda表达式自动成为接口的实现方法</p><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口:"></a>函数式接口:</h4><ul><li><p>是一个接口,符合Java接口的定义</p></li><li><p><strong>只包含一个抽象方法的接口</strong></p></li><li>可以包括其他的已经实现了的default方法,static方法,private方法</li><li>由于只有一个未实现的方法,所以Lambda表达式可以自动填上这个尚未实现的方法</li><li>采用Lambda表达式,可以自动创建一个<strong>伪</strong>嵌套类对象(没有实际的嵌套类class文件产生),然后使用,比真正的嵌套类更加轻量和简洁</li></ul><h4 id="系统自带的函数式接口"><a href="#系统自带的函数式接口" class="headerlink" title="系统自带的函数式接口"></a>系统自带的函数式接口</h4><ul><li>大量重复性的函数式接口,使得源码膨胀,反而会使得源码的可读性下降</li><li>系统自带的函数式接口涵盖了大部分功能<ul><li>例如以下标准化的参数式接口</li></ul></li></ul><table><thead><tr><th>接口</th><th>参数</th><th>返回值</th><th>示例</th></tr></thead><tbody><tr><td>Predicate<T></T></td><td>T</td><td>Boolean</td><td>接受一个参数,返回一个布尔值</td></tr><tr><td>Consumer<T></T></td><td>T</td><td>void</td><td>接受一个参数,无返回值</td></tr><tr><td>Function<T></T></td><td>T</td><td>R</td><td>接受一个参数,返回一个值</td></tr><tr><td>Supplier<T></T></td><td>None</td><td>T</td><td>数据工厂</td></tr></tbody></table><p>如果我们在某个接口上声明了注解，那么编译器就会按照函数式接口的定义来要求 该接口，这样如果有两个抽象方法，程序编译就会报错的。所以，从某种意义上来说，只要你保证你的接口<br>中只有一个抽象方法，你可以不加这个注解。加上就会自动进行检测的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFunctionalInterface</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;      </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="谓词函数Predicate"><a href="#谓词函数Predicate" class="headerlink" title="谓词函数Predicate"></a>谓词函数Predicate<T></T></h5><ul><li><p>接受一个参数,作判断,返回一个布尔值</p></li><li><p><code>`</code>java<br>package demo;</p><p>import java.util.function.Predicate;</p><p>public class test {</p><pre><code>public static void main(String[] args) &#123;    String[] planets = new String[] &#123;             &quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;,             &quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot; &#125;;    StringChecker evenLength = s -&gt;         &#123;            if(s.length()%2 == 0)                return true;            return false;        &#125;;//自动产生出了一个子类对象    for(String p : planets)    &#123;        if(evenLength.test(p)) &#123;            System.out.println(p);        &#125;    &#125;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 消费者函数Consumer&lt;T&gt;</span><br><span class="line"></span><br><span class="line">* 接受一个参数,做操作,无返回</span><br><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  package demo;</span><br><span class="line">  </span><br><span class="line">  import static java.lang.Math.floor;</span><br><span class="line">  import static java.lang.Math.random;</span><br><span class="line">  </span><br><span class="line">  import java.util.function.Consumer;</span><br><span class="line">  </span><br><span class="line">  public class test &#123;</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">  String[] planets = new String[] &#123; </span><br><span class="line">  &quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;, </span><br><span class="line">  &quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot; &#125;;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //Consumer 有一个accept的抽象方法</span><br><span class="line">  //接收一个参数，没有返回</span><br><span class="line">  Consumer&lt;String&gt; printer = s -&gt; </span><br><span class="line">  System.out.println(&quot;Planet :&quot; + s);</span><br><span class="line">  </span><br><span class="line">  for(String p : planets)&#123;</span><br><span class="line">  printer.accept(p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="数据工厂Supplier"><a href="#数据工厂Supplier" class="headerlink" title="数据工厂Supplier"></a>数据工厂Supplier<T></T></h5><ul><li><p>无输入参数,返回一个数据</p></li><li><p><code>`</code>java<br>package demo;</p><p>import static java.lang.Math.floor;<br>import static java.lang.Math.random;</p><p>import java.util.function.Supplier;</p><p>public class test {</p><pre><code>public static void main(String[] args) &#123;    String[] planets = new String[] &#123;             &quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;,             &quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot; &#125;;    // Supplier 有一个get的抽象方法    // 无输入参数，返回一个数据    Supplier&lt;String&gt; planetFactory = () -&gt;         planets[(int) floor(random() * 8)];    for (int i = 0; i &lt; 5; i++) &#123;        System.out.println(planetFactory.get());    &#125;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 函数接口Function&lt;T&gt;</span><br><span class="line"></span><br><span class="line">* 接受一个参数,返回一个参数</span><br><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  package demo;</span><br><span class="line">  </span><br><span class="line">  import java.util.function.Function;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  public class test &#123;</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">  String[] planets = new String[] &#123; </span><br><span class="line">  &quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;, </span><br><span class="line">  &quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot; &#125;;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //Function 有一个apply的抽象方法</span><br><span class="line">  //接收一个参数，返回一个结果</span><br><span class="line">  Function&lt;String, String&gt; upper = s -&gt; </span><br><span class="line">  &#123;</span><br><span class="line">  //可以做更复杂的操作</span><br><span class="line">  return s.toUpperCase();</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  for(String p : planets)&#123;</span><br><span class="line">  System.out.println(upper.apply(p));</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>lambda表达式支持传递现有的类库函数</p><p>相当于是将已经写好的lambda表达式直接填充到函数式接口中</p><p>接下来介绍方法引用的五种方法:</p><h5 id="Class-staticMethod"><a href="#Class-staticMethod" class="headerlink" title="Class::staticMethod"></a>Class::staticMethod</h5><p>如同 Math.abs方法</p><ul><li>等价于提供<strong>方法参数</strong>的lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NumFunction</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> num)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">worker</span><span class="params">(NumFunction nf, <span class="type">double</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> nf.calculate(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">5.3</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> worker(Math::abs, a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> worker(Math::floor, a);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Class-instanceMethod"><a href="#Class-instanceMethod" class="headerlink" title="Class::instanceMethod"></a>Class::instanceMethod</h5><ul><li><p>第一个参数 将变为方法的执行体</p></li><li><p>通过类来提供实例方法</p></li><li><p><code>`</code>java<br>package demo;</p><p>import java.util.Arrays;</p><p>public class test {</p><pre><code>public static void main(String[] args) &#123;    test obj = new test();    obj.Test1();&#125;    public void Test1()    &#123;    String[] planets = new String[] &#123;             &quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;,             &quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot; &#125;;        Arrays.sort(planets, this::lengthCompare);//自动产生出Arrays对象        System.out.println(Arrays.toString(planets));&#125;public int lengthCompare(String first, String second)&#123;    return first.length() - second.length();&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### object::instanceMethod</span><br><span class="line"></span><br><span class="line">* 通过对象提供实例方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package demo;</span><br><span class="line"> </span><br><span class="line">public class test &#123;</span><br><span class="line"></span><br><span class="line">public static void worker(PrintFunction pf, String s) &#123;</span><br><span class="line">pf.exec(s);//系统会自动产生一个PrintFunction的对象,来实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String a = &quot;abc&quot;;</span><br><span class="line">worker(System.out::println, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface PrintFunction &#123;</span><br><span class="line">public void exec(String s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这些方法也可以通过super关键字调用父类的方法,代码以及原理大同小异,大家可以自行了解一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperInstanceMethodTest</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SuperInstanceMethodTest</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperInstanceMethodTest</span>();</span><br><span class="line">obj.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">String[] planets = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; </span><br><span class="line"><span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Mars&quot;</span>, </span><br><span class="line"><span class="string">&quot;Jupiter&quot;</span>, <span class="string">&quot;Saturn&quot;</span>, <span class="string">&quot;Uranus&quot;</span>, <span class="string">&quot;Neptune&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">Arrays.sort(planets, <span class="built_in">super</span>::lengthCompare);</span><br><span class="line">System.out.println(Arrays.toString(planets));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthCompare</span><span class="params">(String first, String second)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> first.length() - second.length();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章介绍了Maven,测试,一些基本的语法糖和lambda表达式的用法&lt;/p&gt;
&lt;p&gt; &lt;em&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA核心技术</title>
    <link href="https://awen123awen.github.io/2022/04/11/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>https://awen123awen.github.io/2022/04/11/JAVA核心技术/</id>
    <published>2022-04-10T17:46:37.360Z</published>
    <updated>2022-04-24T17:00:10.336Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是Java核心技术的一些知识,代码支持在eclipse上运行,如果有不懂的地方可以直接看mooc上的 &lt;&lt;Java核心技术&gt;&gt; 课程</p><span id="more"></span><h1 id="JAVA核心技术"><a href="#JAVA核心技术" class="headerlink" title="JAVA核心技术"></a>JAVA核心技术</h1><h2 id="第四章-面向对象和类"><a href="#第四章-面向对象和类" class="headerlink" title="第四章 面向对象和类"></a>第四章 面向对象和类</h2><h3 id="第二节：面向对象的java类和对象"><a href="#第二节：面向对象的java类和对象" class="headerlink" title="第二节：面向对象的java类和对象"></a>第二节：面向对象的java类和对象</h3><p><strong>类是定义，是规范，而对象是事例，是类的实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">A</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br></pre></td></tr></table></figure><p>如上的两个对象，他们的类型都是A，但是这两个对象确实不同的，在内存中的<strong>存放地址</strong>不同，因此没有两个对象是完全相同的。</p><p><strong>详解</strong> </p><ul><li><code>obj1</code>可以看做C++中的指针，他在<code>java</code>中的名字为<code>Reference</code></li><li>对象赋值是<code>Reference</code>的赋值(可以理解为一个指针将自己所指向的地址传递给另一个指针），而基本类型是直接拷贝</li></ul><h3 id="第三节：信息隐藏和this"><a href="#第三节：信息隐藏和this" class="headerlink" title="第三节：信息隐藏和this"></a>第三节：信息隐藏和this</h3><h4 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏"></a>信息隐藏</h4><p><strong>被隐藏的信息只能通过特定方法查询，如同密码客户端只能修改无法查询</strong></p><p><strong>面向对象的法则：信息隐藏</strong></p><ul><li>类的成员属性，是私有的private</li><li>类的方法是公有的public的，可以通过方法修改成员属性的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InfoHiding</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="comment">//私有成员属性，但是可以靠getId来返回id，通过setId来查询id</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InfoHiding</span><span class="params">(<span class="type">int</span> id2)</span> &#123;</span><br><span class="line">id = id2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id2)</span> &#123;</span><br><span class="line">id = id2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get与set方法一般也被成为getter和setter</span></span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p><strong>this负责指向本类中的成员变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoHiding2</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InfoHiding2</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="comment">//该构造函数中，this.id代表对象中的成员属性，而非该函数中的参数</span></span><br><span class="line">        <span class="comment">//例如我调用函数 InfoHiding2 obj = new InfoHiding2(2);</span></span><br><span class="line">        <span class="comment">//则boj.id=2;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyPairNumber</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyPairNumber</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(obj.sum());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPairNumber</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> m;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getM</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setM</span><span class="params">(<span class="type">int</span> m)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setN</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.n = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyPairNumber</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyPairNumber</span><span class="params">(<span class="type">int</span> m)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>(m, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyPairNumber</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.m = m;</span><br><span class="line"><span class="built_in">this</span>.n= n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.add(m,n);  <span class="comment">//return add(m,n);  also ok</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>此外this负责指向本类中的成员方法</p><p><code>this.add(5,3)//调用本类中的add方法</code></p></li><li><p>this可以代替本类中的构造函数</p><p><code>this(5)//调用本类只有一个形参的构造函数</code></p></li></ul><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="第一节：继承"><a href="#第一节：继承" class="headerlink" title="第一节：继承"></a>第一节：继承</h3><p><strong>变量类型的继承</strong> 父亲有的儿子就有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> <span class="comment">//父类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> <span class="comment">//派生类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    s.f1();  <span class="comment">//Son没有定义f1方法,却可以直接使用父类的f1方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承避免了类型的重复定义</strong></p><p>其中基底叫做：基类或父类 </p><p>派生出来的叫做：子类或派生类</p><p><strong>如果父类与子类出现了重名方法则优先调用子类的</strong></p><p><strong>每个子类的构造函数的第一句话都默认调用父类的无参构造函数super(),除非子类的第一句话是super，而且super语句必须放在第一条，不会出现两条连续的super语句</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;222222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//super(); 编译器自动增加super()</span></span><br><span class="line">System.out.println(<span class="string">&quot;333333&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">B</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">super</span>(a);  <span class="comment">//编译器不会自动增加super();</span></span><br><span class="line">System.out.println(<span class="string">&quot;444444&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">B</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line"><span class="type">B</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">111111</span><br><span class="line">333333</span><br><span class="line">==============</span><br><span class="line">222222</span><br><span class="line">444444</span><br></pre></td></tr></table></figure><h3 id="第二节：抽象类和接口"><a href="#第二节：抽象类和接口" class="headerlink" title="第二节：抽象类和接口"></a>第二节：抽象类和接口</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li><p>完整的类：所有的方法都有实现（方法体）</p><ul><li>反正得勒可以被实例化，即被new出来</li><li>类可以没有方法，但是有方法必须被实现</li></ul></li><li><p>抽象类：暂时有方法未实现，需要被定义为抽象类</p><ul><li><p>抽象类关键字abstract声明</p></li><li><p>抽象类的组成</p><ul><li>成员变量</li><li>具体方法</li><li>抽象方法 （加abstract关键词）</li></ul></li><li><p><code>`</code>JAVA<br>public abstract class Shape {</p><pre><code>//面积int area;//计算面积方法public abstract void calArea(); </code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  * 子类可以继承于抽象类，但是一定要实现父类们所有abstract方法，如果不能完全实现，那么子类被定义为抽象类。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 接口</span><br><span class="line"></span><br><span class="line">利用抽象类，弥补了JAVA中单根继承的缺点。</span><br><span class="line"></span><br><span class="line">* 接口不算类（其中的方法未必要实现）也可以算是一个特殊的类（可以继承）</span><br><span class="line"></span><br><span class="line">* 类只可以继承（extends）一个类，但是可以实现（implements）多个接口，继承和实现可以同时进行</span><br><span class="line"></span><br><span class="line">  * 没有实现的方法会都将会叠加</span><br><span class="line">  * 如果该类没有实现将**接口**内的方法全部实现，则只能成为一个抽象类</span><br><span class="line"></span><br><span class="line">* ```JAVA</span><br><span class="line">  //该用例通过 Animal接口 和 Cat类 来演示接口和类的实现方法</span><br><span class="line">  public interface Animal &#123;</span><br><span class="line">  public void eat();</span><br><span class="line">  public void move();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  public class Cat implements Animal //注意implements关键字</span><br><span class="line">  &#123;</span><br><span class="line">  public void eat() &#123;</span><br><span class="line">  System.out.println(&quot;Cat: I can eat&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void move()&#123;</span><br><span class="line">  System.out.println(&quot;Cat: I can move&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;//须在类内将接口中的所有方法全部实现</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>`</code>JAVA<br>//该用例通过 Animal接口 和 LandAnimal接口 来演示接口和抽象类的构造<br>public interface Animal {</p><pre><code>public void eat();public void move();</code></pre><p>}</p><p>public abstract class LandAnimal implements Animal {</p><pre><code>public abstract void eat() ;//没能实现的方法需要写为虚构方法没加入abstract关键词public void move() &#123;    System.out.println(&quot;I can walk by feet&quot;);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```JAVA</span><br><span class="line">  //同时继承并实现接口public interface ClimbTree &#123;public void climb();&#125;public class Rabbit extends LandAnimal implements ClimbTree &#123;//须将接口和类中所有的方法都实现public void climb() &#123;System.out.println(&quot;Rabbit: I can climb&quot;);&#125;public void eat() &#123;System.out.println(&quot;Rabbit: I can eat&quot;);&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>继承必须在接口前（先extends 后implements）</strong></p></li><li><p>接口可以继承多个接口，同时也承载了他们所有的方法，当其被类使用时变必须同时实现其所有方法</p></li></ul><h3 id="第三节：转型，多态和契约设计"><a href="#第三节：转型，多态和契约设计" class="headerlink" title="第三节：转型，多态和契约设计"></a>第三节：转型，多态和契约设计</h3><h4 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h4><ul><li>类型可以互相转换，但是只限制于有继承关系的类<ul><li>子类可以转换为父类，但是父类不可以转换为子类</li><li>子类继承父类所有的财产</li><li>若父类本身就是从子类转化过来的则父类还可以转化为子类</li></ul></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li><p>子类继承父类的所有方法，但子类可以重新定义一个名字，参数和父类一样的方法，这种行为就是重写（覆盖，覆写，overwrite）</p><ul><li><p>子类的方法的优先级高于父类（一个方法替换掉另一个方法）</p></li><li><p><code>`</code> JAVA<br>public class Man extends Human {    public void eat() {        System.out.println(“I can eat more”);    }        public void plough() { }    public static void main(String[] a)    {        Man obj1 = new Man();        obj1.eat();   // call Man.eat()        Human obj2 =  (Human) obj1;        obj2.eat();   // call Man.eat()        Man obj3 = (Man) obj2;        obj3.eat();      // call Man.eat()    }}public class Human {    int height;        int weight;        public void eat()  {        System.out.println(“I can eat!”);    }}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 结果：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">I can eat moreI can eat moreI can eat more//结果均为子类方法，即使对该对象进行强制转换，其仍使用更高优先级的子类方法</span><br></pre></td></tr></table></figure></li></ul></li><li><p>已统一的接口来操纵某一类中不同的对象的动态行为</p></li><li><p>解耦</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalTest</span> &#123;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">haveLunch</span><span class="params">(Animal a)</span>&#123;a.eat();&#125;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;Animal[] as = <span class="keyword">new</span> <span class="title class_">Animal</span>[<span class="number">4</span>];as[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Cat</span>();as[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Dog</span>();as[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Cat</span>();as[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;as.length;i++) &#123;as[i].move();  <span class="comment">//调用每个元素的自身的move方法&#125;for(int i=0;i&lt;as.length;i++) &#123;haveLunch(as[i]);&#125;haveLunch(new Cat());  //Animal  a = new Cat();  haveLunch(a);haveLunch(new Dog());haveLunch(new Animal()&#123;public void eat() &#123;System.out.println(&quot;I can eat from an anonymous class&quot;);&#125;public void move() &#123;System.out.println(&quot;I can move from an anonymous class&quot;);&#125;&#125;);&#125;&#125;public interface Animal &#123;//该接口中没有定义eat方法和move方法public void eat();public void move();&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat: I can moveDog: I can moveCat: I can moveDog: I can moveCat: I can eatDog: I can eatCat: I can eatDog: I can eatCat: I can eatDog: I can eatI can eat from an anonymous class</span><br></pre></td></tr></table></figure><h4 id="契约设计"><a href="#契约设计" class="headerlink" title="契约设计"></a>契约设计</h4><ul><li><code>`</code>JAVA<br>public class havelunch {//被调用类只与Animal类有关系，给什么用什么    public static void havelunch(Animal a)    {        a.eat();    }        public static void main(String[] args) {        havelunch(new Cat());        havelunch(new Dog());    }}//只需要传进来一个实现Animal接口的对象，就可以运行haveLunch方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 第六章</span><br><span class="line"></span><br><span class="line">### 第一节：static</span><br><span class="line"></span><br><span class="line">static静态的，Java中特殊的关键字</span><br><span class="line"></span><br><span class="line">Java中的static关键字可作用在</span><br><span class="line"></span><br><span class="line">* 变量</span><br><span class="line">* 方法</span><br><span class="line">* 类</span><br><span class="line">* 匿名代码块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### static变量</span><br><span class="line"></span><br><span class="line">下面通过Potato例子来展示static变量在运行过程中的流程：</span><br><span class="line"></span><br><span class="line">```JAVA</span><br><span class="line">public class Potato &#123;static int price = 5;String content = &quot;&quot;;public Potato(int price, String content)&#123;this.price = price;this.content = content;&#125;public static void main(String[] a)&#123;System.out.println(Potato.price); //Potato.content    wrongSystem.out.println(&quot;----------------------------------&quot;);Potato obj1 = new Potato(10,&quot;青椒土豆丝&quot;);System.out.println(Potato.price);System.out.println(obj1.price);System.out.println(&quot;----------------------------------&quot;);Potato obj2 = new Potato(20,&quot;酸辣土豆丝&quot;);System.out.println(Potato.price);System.out.println(obj2.price);&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">----------------------------------</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">----------------------------------</span><br><span class="line">20</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>其原理如图所示：</p><p><img src="/.io//Users/SuenKaTong/AppData/Roaming/Typora/draftsRecover/JAVA核心技术/Patato.jpg" alt="原理图"></p><p>所有的对象实例，如例子中的obj1和obj2关于price变量的值都共享存储在共同的空间中</p><h4 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h4><ul><li>静态方法无需通过对象来引用，而通过类名可以直接引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticMethodTest</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">111111</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">222222</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//System.out.println(a);  //error, cannot call non-static variables</span></span><br><span class="line"><span class="comment">//hi()                    //error, cannot call non-static method</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span></span><br><span class="line">&#123;</span><br><span class="line">StaticMethodTest.hello(); <span class="comment">//可以直接输出6个0 和b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态方法中，只能使用静态变量，不能使用非静态变量,静态方法禁止引用非静态变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticMethodTest</span> &#123;<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">111111</span>;<span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">222222</span>;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;000000&quot;</span>);System.out.println(b);<span class="comment">//System.out.println(a);  //error, cannot call non-static variables//hi()                    //error, cannot call non-static method&#125;public static void main(String[] a)&#123;StaticMethodTest.hello();//StaticMethodTest.hi(); //error, 不能使用类名来引用非静态方法StaticMethodTest foo = new StaticMethodTest();foo.hello();  //warning, but it is okfoo.hi();     //right&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="static块"><a href="#static块" class="headerlink" title="static块"></a>static块</h4><ul><li>只在类第一次加载中被调用，在程序运行过程中只会被调用一次</li><li>执行顺序：static块 匿名块 构造块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StaticBlock</span>&#123;<span class="comment">//staticl block &gt; anonymous block &gt; constructor functionstatic&#123;System.out.println(&quot;22222222222222222222&quot;);&#125;    //下面这个是匿名块&#123;System.out.println(&quot;11111111111111111111&quot;);&#125;public StaticBlock()&#123;System.out.println(&quot;33333333333333333333&quot;);&#125;&#123;System.out.println(&quot;44444444444444444444&quot;);&#125;&#125;public class StaticBlockTest &#123;public static void main(String[] args) &#123;System.out.println(&quot;000000000000000&quot;);// TODO Auto-generated method stubStaticBlock obj1 = new StaticBlock();StaticBlock obj2 = new StaticBlock();&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000000000022222222222222222222111111111111111111114444444444444444444433333333333333333333111111111111111111114444444444444444444433333333333333333333</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>static变量：不管有多少个对象，内存中只有一份</li><li>static方法：可以用类名直接引用</li><li>static块：static块只会执行一次，并且 static block &gt; anonymous block &gt; constructor function    </li></ul><p>建议将块代码改写成函数不易被混淆</p><h3 id="第二节：单例模式"><a href="#第二节：单例模式" class="headerlink" title="第二节：单例模式"></a>第二节：单例模式</h3><p>单例模式：内存空间中，一个类只有一个对象存在，这就是单例模式</p><p>限定某一个类在整个程序运行的过程中，只能保留一个实例对象在内存空间中。</p><p>实现方法：</p><ul><li><p>采用static来共享对象实例</p></li><li><p>采用private构造函数，防止外界new操作</p></li><li><p><code>`</code>java<br>//实例class A{     private A ()    {        //本构造函数是私有的    }}//下列语句是错误的，无法创建//因为构造函数是私有的A obj = new A();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class Singleton &#123;</span><br><span class="line">private static Singleton obj = new Singleton(); //共享同一个对象</span><br><span class="line">private String content;</span><br><span class="line"></span><br><span class="line">private Singleton()  //确保只能在类内部调用构造函数</span><br><span class="line">&#123;</span><br><span class="line">this.content = &quot;abc&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getContent() &#123;</span><br><span class="line">return content;</span><br><span class="line">&#125;</span><br><span class="line">public void setContent(String content) &#123;</span><br><span class="line">this.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Singleton getInstance()&#123;</span><br><span class="line">//静态方法使用静态变量</span><br><span class="line">//另外可以使用方法内的临时变量，但是不能引用非静态的成员变量</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Singleton obj1 = Singleton.getInstance();</span><br><span class="line">System.out.println(obj1.getContent());  //abc</span><br><span class="line"></span><br><span class="line">Singleton obj2 = Singleton.getInstance();</span><br><span class="line">System.out.println(obj2.getContent());  //abc</span><br><span class="line"></span><br><span class="line">obj2.setContent(&quot;def&quot;);</span><br><span class="line">System.out.println(obj1.getContent());</span><br><span class="line">System.out.println(obj2.getContent());</span><br><span class="line"></span><br><span class="line">System.out.println(obj1 == obj2); //true, obj1和obj2指向同一个对象,而obj1与obj2都是指针</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第三节-final"><a href="#第三节-final" class="headerlink" title="第三节: final"></a>第三节: final</h3><ul><li><p>Java中的final关键字同样可以用来修饰 类， 方法， 字段</p></li><li><p>final的类不能被继承</p></li></ul><h4 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalFather</span> &#123;&#125;<span class="keyword">class</span> <span class="title class_">Son1</span> <span class="keyword">extends</span> <span class="title class_">FinalFather</span>&#123;<span class="comment">//此处会报错，son1无法继承FinalFather&#125;</span></span><br></pre></td></tr></table></figure><h4 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h4><p>父类中的final方法子类中无法改写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalMethodSon</span> <span class="keyword">extends</span> <span class="title class_">FinalMethodFather</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalMethodSon</span> <span class="keyword">extends</span> <span class="title class_">FinalMethodFather</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>重写不行，但是可以方法重载，即参数列表不一样</strong></p><h4 id="final变量"><a href="#final变量" class="headerlink" title="final变量"></a>final变量</h4><p>final的变量，不能再次赋值</p><ul><li>如果是基本类型的变量，不能修改其值</li><li>如果是对象实例，那么不能修改其指针，但是可以修改对象内部的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FinalObject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalObjectTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">FinalObject</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FinalObject</span>();</span><br><span class="line">System.out.println(obj1.a);</span><br><span class="line">obj1.a = <span class="number">20</span>;<span class="comment">//可以改变实例对象的属性值</span></span><br><span class="line">System.out.println(obj1.a);</span><br><span class="line"></span><br><span class="line">obj1 = <span class="keyword">new</span> <span class="title class_">FinalObject</span>();</span><br><span class="line"><span class="comment">//final对象不能变更指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四节：常量设计和常量池"><a href="#第四节：常量设计和常量池" class="headerlink" title="第四节：常量设计和常量池"></a>第四节：常量设计和常量池</h3><h4 id="常量设计"><a href="#常量设计" class="headerlink" title="常量设计"></a>常量设计</h4><ul><li>常量：一种不会修改的变量<ul><li>Java中没有constant关键字</li><li>如果不想让常量被修改可以设定为final（详情见第三节final常量）</li><li>不会修改/只读/只要一份，设置为static</li><li>方便访问，设定为public</li></ul></li><li>Java中的常量<ul><li>public static final</li><li>甲乙变量名字全大写，以连字符的方式相连，例如UPPER_BOUND</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">PI_NUMBER</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_COUNTRY=<span class="string">&quot;China&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Constants.PI_NUMBER);</span><br><span class="line">System.out.println(Constants.DEFAULT_COUNTRY);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>一种特殊的常量：接口内定义的变量默认是常量</strong></li></ul><p>实现接口，就需要遵循接口的定义，就是尊重契约的精神。所以接口的变量就是以常量的形式存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SpecialAnimal</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;yellow&quot;</span>; <span class="comment">//default: public static final</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">SpecialAnimal</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I can move&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.color = <span class="string">&quot;white&quot;</span>;  <span class="comment">//error, the variables in interface are constants.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中展示了，Cat类在实现SpecialAnimal接口的过程中改变了color属性，在编译过程中会被报错。</p><p>如果在将接口中color属性改为private则无法通过编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SpecialAnimal</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;yellow&quot;</span>; <span class="comment">//error</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>先看一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(n1==n2);  <span class="comment">//true</span></span><br><span class="line"><span class="comment">//对象双等号是比较指针是否指向同一个东西</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(n3==n4);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">System.out.println(n1==n5);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java中很多了基本类型的包装类/字符串都建立常量池</p><p><strong>常量池：相同的值只存储一份，节省内存，共享访问</strong></p><p><img src="/.io//changliangchi.jpg" alt="常量池"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;  <span class="comment">//true,false</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Boolean Test: &quot;</span> + String.valueOf(b1 == b2));</span><br><span class="line"></span><br><span class="line"><span class="type">Byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">127</span>;     <span class="comment">//\u0000-\u007f</span></span><br><span class="line"><span class="type">Byte</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Byte Test: &quot;</span> + String.valueOf(b3 == b4));</span><br><span class="line"></span><br><span class="line"><span class="type">Character</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">127</span>;  <span class="comment">//\u0000-\u007f</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Character Test: &quot;</span> + String.valueOf(c1 == c2));</span><br><span class="line"></span><br><span class="line"><span class="type">Short</span> <span class="variable">s1</span> <span class="operator">=</span> -<span class="number">128</span>;  <span class="comment">//-128~127</span></span><br><span class="line"><span class="type">Short</span> <span class="variable">s2</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Short Test: &quot;</span> + String.valueOf(s1 == s2));</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> -<span class="number">128</span>;  <span class="comment">//-128~127</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Integer Test: &quot;</span> + String.valueOf(i1 == i2));</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">l1</span> <span class="operator">=</span> -<span class="number">128L</span>;  <span class="comment">//-128~127</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">l2</span> <span class="operator">=</span> -<span class="number">128L</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Long Test: &quot;</span> + String.valueOf(l1 == l2));</span><br><span class="line"></span><br><span class="line"><span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">0.5f</span>;</span><br><span class="line"><span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">0.5f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Float Test: &quot;</span> + String.valueOf(f1 == f2));</span><br><span class="line"></span><br><span class="line"><span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Double Test: &quot;</span> + String.valueOf(d1 == d2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>概念</strong> ：常量池与堆内存</p><ul><li>为节约内存，共享访问，Java中较小的常量一般存放在常量池</li><li>比较大的实例对象则一般存放在堆内存</li></ul><p>存放在不同内存内的属性无法直接比较</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringConstantTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span> + <span class="string">&quot;c&quot;</span>; <span class="comment">//都是常量，编译器将优化，下同</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s3); <span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s4); <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>s1,s2,s3,s4 均指向常量池内的同一内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxClassTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">10</span>;                <span class="comment">// 自动装箱</span></span><br><span class="line">System.out.println(i1 == i2);   <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 自动拆箱  基本类型和包装类进行比较，包装类自动拆箱</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line">System.out.println(i1 == i3);  <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 自动拆箱  基本类型和包装类进行比较，包装类自动拆箱</span></span><br><span class="line"></span><br><span class="line">System.out.println(i2 == i3); <span class="comment">//false</span></span><br><span class="line"><span class="comment">// 两个对象比较，比较其地址。 </span></span><br><span class="line"><span class="comment">// i2是常量，放在栈内存常量池中，i3是new出对象，放在堆内存中</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>);</span><br><span class="line">System.out.println(i1 == (i4+i5));   <span class="comment">//true</span></span><br><span class="line">System.out.println(i2 == (i4+i5));   <span class="comment">//true</span></span><br><span class="line">System.out.println(i3 == (i4+i5));   <span class="comment">//true</span></span><br><span class="line"><span class="comment">// i4+i5 操作将会使得i4,i5自动拆箱为基本类型并运算得到10. </span></span><br><span class="line"><span class="comment">// 基础类型10和对象比较, 将会使对象自动拆箱，做基本类型比较</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> i4 + i5;  <span class="comment">// +操作使得i4,i5自动拆箱，得到10，因此i6 == i2.</span></span><br><span class="line">System.out.println(i1 == i6);  <span class="comment">//true</span></span><br><span class="line">System.out.println(i2 == i6);  <span class="comment">//true</span></span><br><span class="line">System.out.println(i3 == i6);  <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringNewTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s0</span> <span class="operator">=</span> <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//true 常量池</span></span><br><span class="line">System.out.println(s1 == s3); <span class="comment">//false 一个栈内存，一个堆内存</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">//false 两个都是堆内存</span></span><br><span class="line">System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + <span class="string">&quot;def&quot;</span>;    <span class="comment">//涉及到变量，故编译器不优化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span>; <span class="comment">//都是常量 编译器会自动优化成abcdef</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span> (<span class="string">&quot;def&quot;</span>);<span class="comment">//涉及到new对象，编译器不优化</span></span><br><span class="line">System.out.println(s5 == s6); <span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s7); <span class="comment">//false</span></span><br><span class="line">System.out.println(s6 == s7); <span class="comment">//false</span></span><br><span class="line">System.out.println(s0 == s6); <span class="comment">//true </span></span><br><span class="line">System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s3 + <span class="string">&quot;def&quot;</span>;<span class="comment">//涉及到new对象，编译器不优化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s9</span> <span class="operator">=</span> s4 + <span class="string">&quot;def&quot;</span>;<span class="comment">//涉及到new对象，编译器不优化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s10</span> <span class="operator">=</span> s3 + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;def&quot;</span>);<span class="comment">//涉及到new对象，编译器不优化</span></span><br><span class="line">System.out.println(s8 == s9); <span class="comment">//false</span></span><br><span class="line">System.out.println(s8 == s10); <span class="comment">//false</span></span><br><span class="line">System.out.println(s9 == s10); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五节-不可变对象和字符串"><a href="#第五节-不可变对象和字符串" class="headerlink" title="第五节: 不可变对象和字符串"></a>第五节: 不可变对象和字符串</h3><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><ul><li>不可变对象(常量)<ul><li>一旦创建,这个对象(状态/值) 不能被更改了</li><li>其内在的成员变量的值就不能修改</li><li>典型的不可变对象<ul><li>八个基本类别的包装类的对象</li><li>string, BigInterger和BigDecimal等对象</li></ul></li></ul></li><li>可变对象<ul><li>普通对象</li></ul></li></ul><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringPassingTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">changeValue(a);</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">a = <span class="string">&quot;def&quot;</span>;<span class="comment">//相当于申请了def空间,又将def空间赋给a</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">(String b)</span></span><br><span class="line">&#123;</span><br><span class="line">b = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为abc</span></span><br><span class="line"><span class="comment">//     abc</span></span><br></pre></td></tr></table></figure><p>不可变对象是指值对象不再修改,即abc不会被修改,而指针a的指向可以修改.</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableObjectTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">System.out.println(b);</span><br><span class="line">a = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">a=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">change(a);</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String b)</span></span><br><span class="line">&#123;<span class="comment">//实参的指针会传给形参的指针</span></span><br><span class="line">b = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本段代码中,change(a)函数调用后打印a仍显示abc其原因在于,在调用函数过程中,形参的指针改变了,而实参的指针实际上没有变化</p><p><img src="/.io//实参与形参.jpg" alt="change(a)为何无法改变a的值"></p><ul><li>不可变对象, 也是传指针</li><li>由于不可变, 临时变量指向新内存, 外部实参的指针不改动</li></ul><p>如何创建不可变对象</p><ul><li>immutable对象是不可改变的, 有改变, 请clone/new一个对象进行修改</li><li>所有的属性都是final/private的</li><li>不提供setter方法</li><li>类是final的,或者所有方法都是final</li><li>类中包含mutable对象, 那么返回拷贝需要深度clone(可暂时忽略)</li></ul><p>不可变对象的优点</p><ul><li>只读, 线程安全</li><li>并发读, 提高性能</li><li>可以重复使用</li></ul><p>缺点:</p><ul><li>制造垃圾, 浪费空间</li></ul><h4 id="JAVA字符串"><a href="#JAVA字符串" class="headerlink" title="JAVA字符串"></a>JAVA字符串</h4><ul><li><p>字符串是JAVA使用最多的类, 是一种典型的不可变对象</p></li><li><p>string定义有两种</p><ul><li><p><code>`</code>java<br>String a = “def”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  常量赋值,栈分配内存</span><br><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  String a = new String(&quot;def&quot;);</span><br></pre></td></tr></table></figure><p>new对象赋值,堆分配内存</p></li></ul></li><li><p>字符串内容比较: equals方法</p></li><li><p>是否指向同一对象: 指针比较==</p></li></ul><p><strong>在程序运行当中,如果需要大量的字符串加法操作,建议使用StringBuffer或者StringBuilder.</strong></p><p> 下面一个例子展示了StringBuffer的append函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgumentPassing</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">(String s1)</span></span><br><span class="line">&#123;</span><br><span class="line">s1 = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">(StringBuffer s1)</span></span><br><span class="line">&#123;</span><br><span class="line">s1.append(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;        <span class="comment">//基本类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>; <span class="comment">//不可变对象</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">//可变对象</span></span><br><span class="line">changeValue(a);</span><br><span class="line">changeValue(b);</span><br><span class="line">changeValue(c);</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七章package-import和classpath"><a href="#第七章package-import和classpath" class="headerlink" title="第七章package, import和classpath"></a>第七章package, import和classpath</h2><h3 id="第一节-package和import"><a href="#第一节-package和import" class="headerlink" title="第一节 package和import"></a>第一节 package和import</h3><h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><ul><li><p>所有JAVA类都是放置在同一个目录下面的,因此类之间的相互调用无需显示声明调用.</p><ul><li>统一目录下,两个类的名字不能相同</li><li>文件过多,查找和修改都不容易,且容易出错</li></ul></li><li><p>JAVA支持多个目录放置JAVA,并且通过package/import/classpath/jar等机制配合使用,可以支持跨目录放置和调用JAVA类.</p></li><li><p>在JAVA类文件的第一句话给出包的名称</p><ul><li><p><code>`</code>java<br>//cn/edu/ecnu/PackageExample.java</p><p>package cn.edu.ecnu;<br>public class PackageExample<br>{<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    类全名称cn.edu.ecnu.PackageExample,短名称PackageExample</span><br><span class="line"></span><br><span class="line">  * 引用类的时候,必须采用全称引用,程序正文可以用短名称</span><br><span class="line"></span><br><span class="line">  * PackageExample.java必须严格放置在cn/edu/ecnu目录下</span><br><span class="line"></span><br><span class="line">#### import</span><br><span class="line"></span><br><span class="line">import规则</span><br><span class="line"></span><br><span class="line">* import必须全部放在package之后,类定义之前.</span><br><span class="line"></span><br><span class="line">* 多个import的顺序无关</span><br><span class="line">* 可以用*来引入一个目录下的所有类,比如说import java.lang.*,此意思是引入java.lang下面所有的类文件,但是不包括java.lang下面所有的子目录文件.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结:编程时,不同包内的类需声明其位置</span><br><span class="line"></span><br><span class="line">在调用的类存在同名类在引用的别的包内,有如下解决办法:</span><br><span class="line"></span><br><span class="line">* import包时,注明引用的类在哪个包中</span><br><span class="line">* 使用类时,改用 包名.类名 的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 第二节 jar文件导出与导入</span><br><span class="line"></span><br><span class="line">jar可以通过 export导出</span><br><span class="line"></span><br><span class="line">也可在项目的属性 properties中引用</span><br><span class="line"></span><br><span class="line">但是jar包内的class无法被查看</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 第三节 package 和 import 命令行</span><br><span class="line"></span><br><span class="line">`` java -classpath .;c:\temp cn.com.test.Man``</span><br><span class="line"></span><br><span class="line">* 第一部分: java,执行命令,是java.exe的简写</span><br><span class="line"></span><br><span class="line">* 第二部分:-classpath固定格式参数,可以简写成-cp</span><br><span class="line"></span><br><span class="line">* 第三部分:是一个字符串,an分隔符隔开,得到一个个子路径.当运行cn.com.test.Man的过程中,如果需要用到其他的类,就会分裂第三部分的字符串,得到多个子路径,然后依次在每个路径下,再去寻找相应类</span><br><span class="line"></span><br><span class="line">* 第四部分:主执行类的全程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -classpath</span><br><span class="line"></span><br><span class="line">给人的感觉更像是一个路径的总和,你所要找的类或者文件肯定是其中一条.</span><br><span class="line"></span><br><span class="line">而在java运行过程中,java会把子路径一次裁开,以此来寻找各路径下是否存在这样的类.</span><br><span class="line"></span><br><span class="line">当找到自己所需要用的类时则停止寻找,所以路径有优先级.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 第四节 Java访问权限</span><br><span class="line"></span><br><span class="line">#### Java的四种访问权限</span><br><span class="line"></span><br><span class="line">* private:私有的,只能本类访问</span><br><span class="line">* default:同一个包内访问,但在实际情况中default的使用会引起编译器的报错</span><br><span class="line">* protected:同一个包,子类均可以访问</span><br><span class="line">* public:公开的,所有的类都可以访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用范围:</span><br><span class="line"></span><br><span class="line">* 四种类都可以用来修饰成员变量,成员方法,构造函数</span><br><span class="line"></span><br><span class="line">* default和public都可以修饰类</span><br><span class="line"></span><br><span class="line">![访问权限](JAVA核心技术/访问权限.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">推荐:</span><br><span class="line"></span><br><span class="line">* 成员变量都是private</span><br><span class="line"></span><br><span class="line">* 成员方法都是public</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 第八章 JAVA常用类</span><br><span class="line"></span><br><span class="line">### 第一节 Java类库概述</span><br><span class="line"></span><br><span class="line">* Java类库</span><br><span class="line">  * 包名以Java开始的包是Java核心包</span><br><span class="line">  * 包名以Javax开始的包是Java扩展包</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line"></span><br><span class="line">* Java.io 提供了通过数据流,对象序列以及文件系统实现的系统输入,输出</span><br><span class="line">* Java.lang Java编程语言的基本类库</span><br><span class="line"></span><br><span class="line">要学会查阅相关API文档</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 第二节 数字相关类</span><br><span class="line"></span><br><span class="line">#### 整数类型</span><br><span class="line"></span><br><span class="line">![整数](JAVA核心技术/整数类型.jpg)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">#### 浮点数类型</span><br><span class="line"></span><br><span class="line">![浮点数类型](JAVA核心技术/浮点数类型.jpg)</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">#### 大数字类型</span><br><span class="line"></span><br><span class="line">![大数字类型](JAVA核心技术/大数字类型.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 随机数类</span><br><span class="line"></span><br><span class="line">![随机数类](JAVA核心技术/随机数类.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 数字工具类</span><br><span class="line"></span><br><span class="line">![数字工具类](JAVA核心技术/数字工具类.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 第三节 字符串相关类</span><br><span class="line"></span><br><span class="line">#### 字符串</span><br><span class="line"></span><br><span class="line">其中以下方法较为常用</span><br><span class="line"></span><br><span class="line">![](JAVA核心技术/字符串方法.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```JAVA</span><br><span class="line">public class StringTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String a = &quot;123;456;789;123 &quot;;</span><br><span class="line">System.out.println(a.charAt(0)); // 返回第0个元素</span><br><span class="line">System.out.println(a.indexOf(&quot;;&quot;)); // 返回第一个;的位置</span><br><span class="line">System.out.println(a.concat(&quot;;000&quot;)); // 连接一个新字符串并返回，a不变</span><br><span class="line">System.out.println(a.contains(&quot;000&quot;)); // 判断a是否包含000</span><br><span class="line">System.out.println(a.endsWith(&quot;000&quot;)); // 判断a是否以000结尾</span><br><span class="line">System.out.println(a.equals(&quot;000&quot;)); // 判断是否等于000</span><br><span class="line">System.out.println(a.equalsIgnoreCase(&quot;000&quot;));// 判断在忽略大小写情况下是否等于000</span><br><span class="line">System.out.println(a.length()); // 返回a长度</span><br><span class="line">System.out.println(a.trim()); // 返回a去除前后空格后的字符串，a不变</span><br><span class="line">String[] b = a.split(&quot;;&quot;); // 将a字符串按照;分割成数组</span><br><span class="line">for (int i = 0; i &lt; b.length; i++) &#123;</span><br><span class="line">System.out.println(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;===================&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(a.substring(2, 5)); // 截取a的第2个到第5个字符 a不变</span><br><span class="line">System.out.println(a.replace(&quot;1&quot;, &quot;a&quot;));</span><br><span class="line">System.out.println(a.replaceAll(&quot;1&quot;, &quot;a&quot;)); // replaceAll第一个参数是正则表达式</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;===================&quot;);</span><br><span class="line"></span><br><span class="line">String s1 = &quot;12345?6789&quot;;</span><br><span class="line">String s2 = s1.replace(&quot;?&quot;, &quot;a&quot;);</span><br><span class="line">String s3 = s1.replaceAll(&quot;[?]&quot;, &quot;a&quot;);</span><br><span class="line">// 这里的[?] 才表示字符问号，这样才能正常替换。不然在正则中会有特殊的意义就会报异常</span><br><span class="line">System.out.println(s2);</span><br><span class="line">System.out.println(s3);</span><br><span class="line">System.out.println(s1.replaceAll(&quot;[\\d]&quot;, &quot;a&quot;)); //将s1内所有数字替换为a并输出，s1的值未改变。</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h4><ul><li>StringBuffer ( 字符串加减,同步,性能好 )</li><li>StringBuilder ( 字符串加减,不同步,性能更好 )</li></ul><h3 id="第四节-时间相关类"><a href="#第四节-时间相关类" class="headerlink" title="第四节 时间相关类"></a>第四节 时间相关类</h3><h4 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h4><ul><li><p>java.util.Data 类 getTime()方法可以获取时间 </p></li><li><p>java.sql.Date 和数据库相关的时间类</p></li><li><p>Calendar是目前程序中最常用的,但是是抽象类</p><p>想要或许对象可以借助方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar.gerInstance();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarClassTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">gc</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">System.out.println(gc.getClass().getName());</span><br><span class="line"><span class="comment">//Calendar.getInstance();返回的是GregorianCalendar对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">GregorianCalendar</span> <span class="variable">gc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">System.out.println(gc2.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="calendar主要方法用法"><a href="#calendar主要方法用法" class="headerlink" title="calendar主要方法用法"></a>calendar主要方法用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 获取月，这里需要需要月份的范围为0~11，因此获取月份的时候需要+1才是当前月份值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取日</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取时</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR);</span><br><span class="line">        <span class="comment">// int hour = calendar.get(Calendar.HOUR_OF_DAY); // 24小时表示</span></span><br><span class="line">        <span class="comment">// 获取分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="comment">// 获取秒</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> calendar.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 星期，英语国家星期从星期日开始计算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">weekday</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_WEEK);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;现在是&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span> + hour</span><br><span class="line">                + <span class="string">&quot;时&quot;</span> + minute + <span class="string">&quot;分&quot;</span> + second + <span class="string">&quot;秒&quot;</span> + <span class="string">&quot;星期&quot;</span> + weekday);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一年后的今天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 同理换成下个月的今天calendar.add(Calendar.MONTH, 1);</span></span><br><span class="line">        calendar.add(Calendar.YEAR, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 获取月</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取日</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;一年后的今天：&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取任意一个月的最后一天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 假设求6月的最后一天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentMonth</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="comment">// 先求出7月份的第一天，实际中这里6为外部传递进来的currentMonth变量</span></span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line">        calendar.set(calendar.get(Calendar.YEAR), currentMonth, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        calendar.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取日</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;6月份的最后一天为&quot;</span> + day + <span class="string">&quot;号&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        calendar.set(Calendar.YEAR, <span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在是&quot;</span> + calendar.get(Calendar.YEAR) + <span class="string">&quot;年&quot;</span>);</span><br><span class="line"></span><br><span class="line">        calendar.set(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 获取月</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取日</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;现在是&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//add和roll的区别</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;     </span><br><span class="line"></span><br><span class="line">        calendar.set(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, -<span class="number">8</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 获取月</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取日</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;2018.8.8, 用add减少8天，现在是&quot;</span> + year + <span class="string">&quot;.&quot;</span> + month + <span class="string">&quot;.&quot;</span> + day);</span><br><span class="line">        </span><br><span class="line">        calendar.set(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        calendar.roll(Calendar.DAY_OF_MONTH, -<span class="number">8</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取年</span></span><br><span class="line">        year = calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 获取月</span></span><br><span class="line">        month = calendar.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取日</span></span><br><span class="line">        day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;2018.8.8, 用roll减少8天，现在是&quot;</span> + year + <span class="string">&quot;.&quot;</span> + month + <span class="string">&quot;.&quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">CalendarTest</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalendarTest</span>();</span><br><span class="line">c.test1();</span><br><span class="line">System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">c.test2();</span><br><span class="line">System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">c.test3();</span><br><span class="line">System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">c.test4();</span><br><span class="line">System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">c.test5();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五节-格式化"><a href="#第五节-格式化" class="headerlink" title="第五节 格式化"></a>第五节 格式化</h3><h4 id="数字格式化-抽象类"><a href="#数字格式化-抽象类" class="headerlink" title="数字格式化 抽象类"></a>数字格式化 抽象类</h4><p>DecimalFormat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecimalFormaterRuleTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        DecimalFormat df1,df2;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">&quot;整数部分为0的情况，0/#的区别&quot;</span>);</span><br><span class="line">        <span class="comment">// 整数部分为0 ， #认为整数不存在，可不写； 0认为没有，但至少写一位，写0</span></span><br><span class="line">        df1 = <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">        df2 = <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(df1.format(<span class="number">0.1</span>)); <span class="comment">// .10  </span></span><br><span class="line">        System.out.println(df2.format(<span class="number">0.1</span>)); <span class="comment">// 0.10  </span></span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">&quot;小数部分0/#的区别&quot;</span>);</span><br><span class="line">        <span class="comment">//#代表最多有几位，0代表必须有且只能有几位</span></span><br><span class="line">        df1 = <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">        df2 = <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.##&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(df1.format(<span class="number">0.1</span>)); <span class="comment">// 0.10</span></span><br><span class="line">        System.out.println(df2.format(<span class="number">0.1</span>)); <span class="comment">// 0.1</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(df1.format(<span class="number">0.006</span>)); <span class="comment">// 0.01</span></span><br><span class="line">        System.out.println(df2.format(<span class="number">0.006</span>)); <span class="comment">// 0.01</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">&quot;整数部分有多位&quot;</span>);</span><br><span class="line">        <span class="comment">//0和#对整数部分多位时的处理是一致的 就是有几位写多少位</span></span><br><span class="line">        df1 = <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">        df2 = <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(df1.format(<span class="number">2</span>)); <span class="comment">// 2.00</span></span><br><span class="line">        System.out.println(df2.format(<span class="number">2</span>)); <span class="comment">// 2.00</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(df1.format(<span class="number">20</span>)); <span class="comment">// 20.00</span></span><br><span class="line">        System.out.println(df2.format(<span class="number">20</span>)); <span class="comment">// 20.00</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(df1.format(<span class="number">200</span>)); <span class="comment">// 200.00</span></span><br><span class="line">        System.out.println(df2.format(<span class="number">200</span>)); <span class="comment">// 200.00</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><h4 id="日期-时间格式化-抽象类"><a href="#日期-时间格式化-抽象类" class="headerlink" title="日期/时间格式化 抽象类"></a>日期/时间格式化 抽象类</h4><p>用的时候再查api文档吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是Java核心技术的一些知识,代码支持在eclipse上运行,如果有不懂的地方可以直接看mooc上的 &amp;lt;&amp;lt;Java核心技术&amp;gt;&amp;gt; 课程&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS基础知识</title>
    <link href="https://awen123awen.github.io/2022/04/10/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://awen123awen.github.io/2022/04/10/CSS基础知识/</id>
    <published>2022-04-10T13:04:54.759Z</published>
    <updated>2022-04-18T13:12:46.461Z</updated>
    
    <content type="html"><![CDATA[<p>关于CSS的相关知识</p><span id="more"></span><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="01-标签选择器"><a href="#01-标签选择器" class="headerlink" title="01 标签选择器"></a>01 标签选择器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;02标签选择器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    /* 基础选择器 标签选择器：写上标签名 按类别全选 */</span><br><span class="line">    p   &#123;</span><br><span class="line">          color: green;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">          color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;男生&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;男生&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;男生&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>标签选择器可以选定<strong>特定</strong>标签来改变其属性</p><h2 id="02-类选择器"><a href="#02-类选择器" class="headerlink" title="02 类选择器"></a>02 类选择器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;03类选择器+画盒子 类选择器的特殊使用，多类名&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        /* 类选择器口诀：样式点定义 结构类调用 一个或多个 开发最常用 */</span><br><span class="line">        .red &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .green &#123;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box &#123;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li class=&quot;red box&quot;&gt;a&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;b&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;c&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;d&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;e&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;red box&quot;&gt;红色&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;green box&quot;&gt;绿色&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;red&quot;&gt;红色&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>样式点定义，结构类调用</strong></p><h2 id="04-id选择器"><a href="#04-id选择器" class="headerlink" title="04 id选择器"></a>04 id选择器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;id选择器&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        /* id选择器的口诀，样例#定义，结构id调用，只能调用一次，别人切勿使用 */</span><br><span class="line">        #pink &#123;</span><br><span class="line">            color: rgb(219, 152, 164);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;pink&quot;&gt;ex1&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>id选择器只能调用一次</strong></p><h2 id="05-基础选择器之通用配符选择器"><a href="#05-基础选择器之通用配符选择器" class="headerlink" title="05 基础选择器之通用配符选择器"></a>05 基础选择器之通用配符选择器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;基础选择器之通配选择器&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        /* *将所有的标签都改变了颜色 */</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;ex1&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;ex2&lt;/span&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;ex3&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="06-字体选择与字体大小"><a href="#06-字体选择与字体大小" class="headerlink" title="06 字体选择与字体大小"></a>06 字体选择与字体大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;字体选择与字体大小&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    h2 &#123;</span><br><span class="line">        font-family: &#x27;Microsoft Yahei&#x27;;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 80px;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;!-- 标题标签中的文字大小需要单独设定 --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;ex1&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;ex2&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>字体选择有优先级别，在不同浏览器中有不同的默认字体，微软雅黑为最常见的通用字体</p><h2 id="07-字体粗细"><a href="#07-字体粗细" class="headerlink" title="07 字体粗细"></a>07 字体粗细</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;字体粗细&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .bold &#123;</span><br><span class="line">            font-weight: 700;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 700等同于bold都是加粗效果 400为正常效果 属性值范围在100-900之间*/</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;ex1&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>其中font-weight ：400为正常效果</p><p>​                                 700为加粗效果</p><h2 id="08-文字样式"><a href="#08-文字样式" class="headerlink" title="08 文字样式"></a>08 文字样式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;文字样式&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        p &#123;</span><br><span class="line">            font-style: italic;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        em &#123;</span><br><span class="line">            font-style: normal;</span><br><span class="line">            /* 主要用来使倾斜的文字不倾斜 */</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;ex1&lt;/p&gt;</span><br><span class="line">    &lt;em&gt;ex2&lt;/em&gt; &lt;br&gt;</span><br><span class="line">    &lt;em&gt;ex2&#x27;&lt;/em&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="09-复合属性"><a href="#09-复合属性" class="headerlink" title="09 复合属性"></a>09 复合属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 任务：想要div字体变倾斜 加粗 字号设置为16像素 并且 是微软雅黑 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font-style: italic;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            font-weight: 700;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            font-size: 16px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            font-family: &#x27;microsoft yahei&#x27;; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 复合属性的简写方式 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font： font-style font-weight font-size/font-height font-family; 必须按照此方式书写 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">                不可以颠倒顺序*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16</span> <span class="string">&#x27;Microsoft yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ex1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复合属性简写，必须按照其规定顺序。</p><h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><h2 id="01-文本颜色"><a href="#01-文本颜色" class="headerlink" title="01 文本颜色"></a>01 文本颜色</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* color: rgb(175, 14, 41);  */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 十六进制发 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#832222</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        样例</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改变文本颜色的三种方法:</p><ul><li>预定义的颜色值</li><li>十六进制</li><li>RGB代码</li></ul><p>其中十六进制表示颜色最为常用</p><h2 id="02-对齐文本"><a href="#02-对齐文本" class="headerlink" title="02 对齐文本"></a>02 对齐文本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        有 left center和right三种属性值 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        默认为left</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        样例</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="03-装饰文本"><a href="#03-装饰文本" class="headerlink" title="03 装饰文本"></a>03 装饰文本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            text-decoration: line-through;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            划除线</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            text-decoration: overline;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            上划线</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            text-decoration:none;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            恢复默认,例如链接标签会默认下滑线,通过none可以去除其下划线</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        样例:下划线</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="04-文本缩进"><a href="#04-文本缩进" class="headerlink" title="04 文本缩进"></a>04 文本缩进</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* em单位是相对于现在一个相对文字单位的大小 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">        样例句子</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        aaaaaaaaa</span><br><span class="line">        <span class="comment">&lt;!-- 只有第一行会缩进 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="05-行间距"><a href="#05-行间距" class="headerlink" title="05 行间距"></a>05 行间距</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 改变行间距不会改变文字大小 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">            行间距指的是文字加边框一共XXpx*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">        ex1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="06-文本属性总结"><a href="#06-文本属性总结" class="headerlink" title="06 文本属性总结"></a>06 文本属性总结</h2><ul><li>color</li><li>text-align</li><li>text-indent</li><li>text-decoration</li><li>line-height</li></ul><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><h2 id="01-内部样式表"><a href="#01-内部样式表" class="headerlink" title="01 内部样式表"></a>01 内部样式表</h2><p>定义:所谓内部样式表,就是在html页面内写样式,但是是单独写到style标签内部</p><ul><li><p>例如说 我们一般将style标签写到head标签之间</p></li><li><p>但是实际上,style标签写在哪里都是可以的,比如写进body标签内部</p></li><li><p><strong>style标签所控制的范围是整个html页面</strong></p></li></ul><p><strong>上述方法被称为嵌入式引用</strong></p><ul><li>优点:使样式与结构部分分离,但是最终结构和样式还是在一个页面里面</li></ul><h2 id="02-行内样式表"><a href="#02-行内样式表" class="headerlink" title="02 行内样式表"></a>02 行内样式表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>适合在行内需要特殊需求时使用</p><h2 id="03-外部样式表"><a href="#03-外部样式表" class="headerlink" title="03 外部样式表"></a>03 外部样式表</h2><p>单独建立css文件,之后通过link标签在html页面引入css文件</p><p>html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span>//写相对路径</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这个css文件内只有样式没有标签 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法"></a>emmet语法</h1><h2 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h2><ul><li>生成标签 直接输入标签名按tab键即可</li><li>如果想要生成多个相同的标签,加上*就可以了</li><li>如果有父子级关系,可以用&gt; 比如说ul &gt; li 就可以了</li><li>如果有兄弟关系的标签,用+就可以了,比如说 div + p</li><li>如果生成带有类名或者id名字的,直接写 .demo 或者 #two tab键就可以了</li><li>如果生成的div类名是有顺序的,可以用自增符号 $</li><li>如果想要生成的标签里面默认显示几个文字</li></ul><h2 id="快速生成CSS样式语法"><a href="#快速生成CSS样式语法" class="headerlink" title="快速生成CSS样式语法"></a>快速生成CSS样式语法</h2><p>简写方法,取首字母</p><h1 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h1><p>右键格式化文档,鼠标右键,自动按标准方法排放代码</p><p>或shift + alt + f</p><h1 id="css-的复合选择器"><a href="#css-的复合选择器" class="headerlink" title="css 的复合选择器"></a>css 的复合选择器</h1><p>在 css 中,可以根据选择器的类型把选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>,复合选择器是建立在基础选择器之上的,对基本选择器进行组合的.</p><ul><li>复合选择器可以更准确,更高效的选择目标元素 ( 标签 )</li><li>复合选择器是由两个或多个基础选择器,通过不同的方式组合而成的</li><li>常用的复合选择器包括: 后代选择器,子选择器,并集选择器,伪类选择器等等</li></ul><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>也叫包含选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>元素1 元素2 &#123; 样式声明 &#125;</code></p><ul><li><p>上述语法表示选择元素 1 里面的所有元素2 </p></li><li><p>最终选择的是元素2</p></li><li><p>元素2 只要是 元素1 的后代即可</p></li></ul><h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><p>只选择作为某元素的最近一级子元素,简单理解就是算亲儿子元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>ex1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>ex2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器可以选择多组标签,同时为他们定义相同的样式,通常用于集体声明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ex4</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时将 div p .ex4 li 改成粉色</p><p>各个标签间我们通过逗号隔开</p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊效果,比如给链接添加特殊效果,或选择第一个,第n个元素</p><p>格式:标签名: 状态</p><table><thead><tr><th>标签</th><th>效果</th></tr></thead><tbody><tr><td>a:link</td><td>选择所有未被访问的链接</td></tr><tr><td>a:visited</td><td>选择所有已被访问的链接</td></tr><tr><td>a:hover</td><td>选择鼠标指针位于其上的链接</td></tr><tr><td>a:active</td><td>选择活动链接(鼠标按下未弹起的链接)</td></tr></tbody></table><ul><li><p>一定要按照lvha的循序写</p></li><li><p>在实际工作中我们都需要给链接单独指定样式</p></li></ul><h2 id="focus-伪类选择器"><a href="#focus-伪类选择器" class="headerlink" title="focus 伪类选择器"></a>focus 伪类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使得输入框在被光标选中时,具有特殊效果</p><h1 id="css-的元素显示模式"><a href="#css-的元素显示模式" class="headerlink" title="css 的元素显示模式"></a>css 的元素显示模式</h1><ul><li><p>元素显示模式就是元素以什么方式进行显示,比如<div>自己占一行,比如一行可以放多个<span></span></div></p></li><li><p>html元素分为行内元素与块元素</p></li></ul><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><ul><li>自己独占一行</li><li>高度,宽度和外边距都可以自己设定</li><li>宽度如果不设定会默认是容器的100%</li><li>是一个容器及盒子,里面可以放行元素或者块元素</li></ul><p>常见的块元素有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">ol</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>文字类的元素内不能使用块元素</li><li>p标签主要用于 存放文字,因此p里面不能放块级元素,特别是不能放div</li></ul><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">del</span>&gt;</span> <span class="tag">&lt;<span class="name">s</span>&gt;</span> <span class="tag">&lt;<span class="name">ins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相邻行内元素在同一行显示</li><li>宽和高无法设定</li><li>默认宽度就是他本身内容的宽度</li><li>行内元素只能容纳文本或者其他行内元素</li></ul><p>注意:链接内不能再放链接</p><h2 id="特殊-行内块元素"><a href="#特殊-行内块元素" class="headerlink" title="特殊:行内块元素"></a>特殊:行内块元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span>/&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他们同时具有块元素和行内元素的特点</p><p>称他们为行内块元素</p><p>特点:</p><ul><li>一行显示多个元素</li><li>本身的宽度就是内容的宽度</li><li>高度,行高和外边距以及内边距都是可以设定的</li></ul><h2 id="css-的元素显示模式的转换"><a href="#css-的元素显示模式的转换" class="headerlink" title="css 的元素显示模式的转换"></a>css 的元素显示模式的转换</h2><p>特殊情况下,我们需要元素模式的转换,简单理解一个模式的元素需要另一种模式的特性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 把行内元素a转换为块级元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>:inline</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ex2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ex2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内元素转换为行内块元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h1><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>感觉没啥好说的</p><h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>方便控制位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 在url中插入图片位置地址 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">img/候.png</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景图片平铺"><a href="#背景图片平铺" class="headerlink" title="背景图片平铺"></a>背景图片平铺</h2><p><img src="/.io//图片背景平铺.png" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">            background-image: url(img/候.png);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>页面元素可以同时添加背景图片与背景颜色</p><h2 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h2><h3 id="方位名词"><a href="#方位名词" class="headerlink" title="方位名词"></a>方位名词</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-position: x y;</span><br><span class="line">left right top center</span><br></pre></td></tr></table></figure><h3 id="精确单位"><a href="#精确单位" class="headerlink" title="精确单位"></a>精确单位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-position: 20px 50px;</span><br><span class="line"> x    y</span><br><span class="line">left right top center</span><br></pre></td></tr></table></figure><p>方位名词和精确单位可以混用</p><h2 id="背景图像固定"><a href="#背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">img/gdbj.png</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">            //fixed与scroll两种属性</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: center top;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景半透明"><a href="#背景半透明" class="headerlink" title="背景半透明"></a>背景半透明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><p>层叠性,继承性,优先级</p><h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><p>当对同一种标签同一种属性做出不同定义时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原则为冲突属性,后来者居上</p><p>本样例的最后结果为 pink 50px</p><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>子标签可以继承父标签的一些性质，比如说文本性质</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>ex<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终ex颜色 为pink 字体大小为50px</p><h3 id="行高继承"><a href="#行高继承" class="headerlink" title="行高继承"></a>行高继承</h3><p>子元素可以继承父元素的行高</p><p>行高可以跟单位也可以不跟单位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span>;</span></span><br><span class="line"><span class="language-css">            //(字符大小/行高)</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><ul><li>选择器相同,则执行层叠性</li><li>选择器不同,则根据选择器权重执行</li></ul><p><img src="/.io//优先级.png" alt></p><ul><li>优先级不会进位,而是按位比较</li><li><p>从父级所继承的属性永远是0</p></li><li><p>复合选择器权重会叠加</p></li></ul><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>1.准备网页元素,网页元素基本都是盒子Box</p><p>2.利用CSS设置好盒子样式,然后摆放到相应的位置</p><p>3.往盒子里面装内容</p><p><strong>盒子模型的组成</strong></p><ul><li>border边框</li><li>content内容</li><li>padding内边距</li><li>margin外边距</li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细,单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><table><thead><tr><th>border-style</th><th>属性</th></tr></thead><tbody><tr><td>solid</td><td>实线边框</td></tr><tr><td>dashed</td><td>虚线边框</td></tr><tr><td>dotted</td><td>点线</td></tr></tbody></table><h3 id="简写方法"><a href="#简写方法" class="headerlink" title="简写方法"></a>简写方法</h3><p>没有固定顺序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border: 5px solid pink</span><br></pre></td></tr></table></figure><h3 id="修改固定边框"><a href="#修改固定边框" class="headerlink" title="修改固定边框"></a>修改固定边框</h3><p>border-top </p><p>border-bottom </p><p>border-left</p><p>border-right</p><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>相临边的合并:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-collapse:collapse//表示相邻边框合并在一起</span><br></pre></td></tr></table></figure><h3 id="边框会影响盒子的实际大小"><a href="#边框会影响盒子的实际大小" class="headerlink" title="边框会影响盒子的实际大小"></a>边框会影响盒子的实际大小</h3><p>在做盒子的时候要减去边框的大小</p><h2 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>padding:上右下左</p><p>不设定高于宽,则padding不会撑大盒子</p><h2 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h2><p>控制盒子和盒子之间的距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>块盒子居中:<strong>盒子必须指定了宽度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: 0 auto;</span><br></pre></td></tr></table></figure><p>在盒子内的行内元素:均可通过给父元素增添</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align: center;</span><br></pre></td></tr></table></figure><h2 id="外边距合并-嵌套块元素"><a href="#外边距合并-嵌套块元素" class="headerlink" title="外边距合并-嵌套块元素"></a>外边距合并-嵌套块元素</h2><p>嵌套块元素垂直外边距的具有塌陷问题</p><p>解决方法:</p><ul><li>给父元素增添边框,调制透明</li><li>给父元素定义上内边距</li><li>可以给父元素添加overflow:hidden</li></ul><h2 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于CSS的相关知识&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML常用标签</title>
    <link href="https://awen123awen.github.io/2022/03/26/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>https://awen123awen.github.io/2022/03/26/HTML常用标签/</id>
    <published>2022-03-26T13:43:50.320Z</published>
    <updated>2022-04-18T13:37:22.664Z</updated>
    
    <content type="html"><![CDATA[<p>关于HTML的一些常用基础标签</p><span id="more"></span><h2 id="4-1-标签语义"><a href="#4-1-标签语义" class="headerlink" title="4.1 标签语义"></a>4.1 标签语义</h2><h2 id="4-2-标题标签"><a href="#4-2-标题标签" class="headerlink" title="4.2 标题标签"></a>4.2 标题标签</h2><p>​    HTML 提供了6个等级的网页标签，即<code>&lt;h1&gt; - &lt;h6&gt;</code></p><p>​    标签语义：作为标签使用，并且依据的重要性递减。</p><p>​    具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\04-标题标签.html">点击这里查看</a></p><h2 id="4-3-段落和换行标签"><a href="#4-3-段落和换行标签" class="headerlink" title="4.3 段落和换行标签"></a>4.3 段落和换行标签</h2><p>​    <code>&lt;p&gt;</code>标签用于定义段落</p><p>​    具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\04-标题标签.html">点击这里查看</a></p><p>​    <code>&lt;br /&gt;</code>可用于换行，与段落标签不同的是他不会空行</p><h2 id="4-4-文本格式化标签"><a href="#4-4-文本格式化标签" class="headerlink" title="4.4 文本格式化标签"></a>4.4 文本格式化标签</h2><h3 id="1-粗体"><a href="#1-粗体" class="headerlink" title="1.粗体"></a>1.粗体</h3><p>​    <code>&lt;strong&gt; &lt;/strong&gt;</code>或<code>&lt;b&gt; &lt;/b&gt;</code></p><p>​    建议使用strong标签，语义更加强烈。</p><h3 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2.斜体"></a>2.斜体</h3><p>​    <code>&lt;em&gt; &lt;/em&gt;</code>或<code>&lt;i&gt;&lt;/i&gt;</code></p><h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3.删除线"></a>3.删除线</h3><p>​    <code>&lt;del&gt; &lt;/del&gt;</code>或<code>&lt;s&gt; &lt;/s&gt;</code></p><h3 id="4-下划线"><a href="#4-下划线" class="headerlink" title="4.下划线"></a>4.下划线</h3><p>​    <code>&lt;ins&gt; &lt;/ins&gt;</code>或<code>&lt;u&gt; &lt;/u&gt;</code></p><p>具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\05-文本格式化.html">点击这里查看</a></p><h2 id="4-5-lt-div-gt-和-lt-span-gt-标签"><a href="#4-5-lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="4.5&lt;div&gt;和&lt;span&gt;标签"></a>4.5<code>&lt;div&gt;和&lt;span&gt;</code>标签</h2><p>​    <code>&lt;div&gt; &lt;span&gt;</code>是没有语义的，他们是一个盒子，用来装内容的。</p><p>​    <code>&lt;div&gt;</code>独占一行。（大盒子）</p><p>​    <code>&lt;span&gt;</code>一行上可以多个<code>&lt;span&gt;</code>。（小盒子）</p><p>具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\06-div与span标签.html">点击这里查看</a></p><h2 id="4-6-图像标签和路径"><a href="#4-6-图像标签和路径" class="headerlink" title="4.6 图像标签和路径"></a>4.6 图像标签和路径</h2><h3 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="1.图像标签"></a>1.图像标签</h3><p>​    在HTML标签中，<code>&lt;img&gt;</code>标签用于定义HTML页面中的图像</p><p>​    src是<code>&lt;img&gt;</code>标签的必须属性，它用于指定图像文件的路径和文件名</p><p>​    可以理解为属于这个图像标签的特性</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本。图像不能显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本。鼠标放在图像上可以显示文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr></tbody></table><p>​    具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\07-图像标签.html">点击这里查看</a></p><h3 id="2-路径"><a href="#2-路径" class="headerlink" title="2.路径"></a>2.路径</h3><pre><code>#### (1)目录文件夹和根目录</code></pre><p>​    <strong>目录文件夹</strong>:普通的文件夹，存放了我们制作页面所需要的相关素材，用来管理他们的文件就叫做目录文件夹。</p><p>​    <strong>根目录</strong>:打开目录文件夹的第一页就是根目录。</p><h4 id="2-vscode中打开目录文件夹"><a href="#2-vscode中打开目录文件夹" class="headerlink" title="(2) vscode中打开目录文件夹"></a>(2) vscode中打开目录文件夹</h4><p>​    文件 ——&gt; 打开文件夹即可</p><h4 id="3-路径之相对路径"><a href="#3-路径之相对路径" class="headerlink" title="(3)路径之相对路径"></a>(3)路径之相对路径</h4><ol><li><p>相对路径 :以引用文件所在位置为参考基础，而建立出的目录路径。</p><p>​                 这里所使用样例是以图片相对于HTML页面的位置。</p><p>| 相对路径分类 | 符号 | 说明                                                    |<br>| ———— | —- | ——————————————————- |<br>| 同一级路径   |      | 图像文件位于HTML文件同一级 如<code>&lt;img src=&quot;baidu.gif&quot;&gt;</code>    |<br>| 下一级路径   | /    | 图像文件位于HTML文件同一级 如<code>&lt;img src=&quot;baidu.gif&quot;/&gt;</code>   |<br>| 上一路径     | ../  | 图像文件位于HTML文件上一级 如<code>..&lt;img src=&quot;baidu.gif&quot;/&gt;</code> |</p></li></ol><h2 id="4-7-超链接标签"><a href="#4-7-超链接标签" class="headerlink" title="4.7 超链接标签"></a>4.7 超链接标签</h2><pre><code>### 1.链接的语法格式</code></pre><p>​    标准格式：</p><p>​    <code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口弹出方式”&gt; 文本或图像 &lt;/a&gt;</code></p><p>​    两个属性的作用如下：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的URL地址，(必须属性) 当为标签应用href属性时，他就具有了超链接功能。</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中<code>_self</code>为默认值,<code>_blank</code>为在新窗口中打开的方式。</td></tr></tbody></table><h3 id="2-链接分类："><a href="#2-链接分类：" class="headerlink" title="2.链接分类："></a>2.链接分类：</h3><p>​    1.外部链接：例如<code>&lt; a href=&quot;http://www/baidu.com&quot;&gt; 百度&lt;/a&gt;</code></p><p>​    2.内部链接：网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如</p><p>​    <code>&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</code></p><p>​    3.空链接</p><p>​    4.下载链接</p><p>具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\09-超链接.html">点击这里查看</a></p><h1 id="4-8锚点链接"><a href="#4-8锚点链接" class="headerlink" title="4.8锚点链接"></a>4.8锚点链接</h1><p>锚点链接可以帮助使用者直接跳转到相应位置。</p><p>其具体实现笔记可以参考</p><p>具体效果可<a href="C:\Users\SuenKaTong\Desktop\HTML文件\10-锚点链接.html">点击这里查看</a></p><h1 id="4-9注释和特殊文字"><a href="#4-9注释和特殊文字" class="headerlink" title="4.9注释和特殊文字"></a>4.9注释和特殊文字</h1><p>注释的实现方法可以直接查找笔记。</p><p>特殊字符使用表格如下：</p><p><img src="/.io//special.jpg" alt="特殊字符"></p><h1 id="5-表头与表单"><a href="#5-表头与表单" class="headerlink" title="5 表头与表单"></a>5 表头与表单</h1><h2 id="01-表头单元格标签"><a href="#01-表头单元格标签" class="headerlink" title="01 表头单元格标签"></a>01 表头单元格标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;表格单元格标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- table的五个属性值 --&gt;</span><br><span class="line">    &lt;table align=&quot;center&quot; border=&quot;1&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;500&quot; height=&quot;249&quot;&gt;</span><br><span class="line">        &lt;tr&gt; &lt;th&gt;名字 &lt;/th&gt;&lt;th&gt;性别&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt; &lt;td&gt;张国荣 &lt;/td&gt;&lt;td&gt;男&lt;/td&gt; &lt;td&gt;43&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt; &lt;td&gt;周星驰&lt;/td&gt;&lt;td&gt;男&lt;/td&gt; &lt;td&gt;23&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>表格，行，单元格，在单元格中填写文本</p><h2 id="02-合并单元格"><a href="#02-合并单元格" class="headerlink" title="02 合并单元格"></a>02 合并单元格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;合并单元格&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table width=&quot;500&quot; height=&quot;249&quot; border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr &gt;</span><br><span class="line">            &lt;td rowspan=&quot;2&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>哪里需要合并在哪个td内敲入 col/rowspan 并删除被合并的单元格</p><h2 id="03-无序列表"><a href="#03-无序列表" class="headerlink" title="03 无序列表"></a>03 无序列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;无序列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;asd&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;asd&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;asd&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>与表格结构类似</p><h2 id="04-有序列表"><a href="#04-有序列表" class="headerlink" title="04 有序列表"></a>04 有序列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;有序列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;asd 123&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;asd 234&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;asd 345&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="05-自定义列表"><a href="#05-自定义列表" class="headerlink" title="05 自定义列表"></a>05 自定义列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;自定义列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">        &lt;dt&gt;名词一&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;名词二 解释&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;名词三 解释&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;名词四 解释&lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>自定义列表有了主次层次</p><p><img src="/.io//效果图.jpg" alt="效果图"></p><h2 id="06-表单域"><a href="#06-表单域" class="headerlink" title="06 表单域"></a>06 表单域</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;表单域&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;demo.php&quot; method=&quot;post&quot; name=&quot;name1&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>包含了表单的三个属性</p><h4 id="action传送至哪个界面"><a href="#action传送至哪个界面" class="headerlink" title="action传送至哪个界面"></a>action传送至哪个界面</h4><h4 id="method传送的方式，如何发送表单数据"><a href="#method传送的方式，如何发送表单数据" class="headerlink" title="method传送的方式，如何发送表单数据"></a>method传送的方式，如何发送表单数据</h4><h4 id="name表单的命名"><a href="#name表单的命名" class="headerlink" title="name表单的命名"></a>name表单的命名</h4><h2 id="07-表单元素"><a href="#07-表单元素" class="headerlink" title="07 表单元素"></a>07 表单元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;input 表单元素&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- input标签中的4个属性 name value checked maxlength --&gt;</span><br><span class="line">    &lt;!-- text 文本框 用户可以向里面输入任何文字 --&gt;</span><br><span class="line">    &lt;form action=&quot;xxx.php&quot;&gt;</span><br><span class="line">        &lt;!-- 提供到xxx.php --&gt;</span><br><span class="line"></span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;请输入用户名&quot; maxlength=&quot;8&quot;&gt; &lt;br&gt;</span><br><span class="line">        &lt;!-- value会被传送到后台，供后台人员使用 --&gt;</span><br><span class="line">        密码：&lt;input type=&quot;passport&quot; name=&quot;pwd&quot;&gt; &lt;br&gt;</span><br><span class="line">        &lt;!-- 选择按钮 --&gt;</span><br><span class="line">        &lt;!-- radio单选 可以实现多选一 --&gt;</span><br><span class="line">        性别: 男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt; 女 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;&gt; </span><br><span class="line">        &lt;!-- 1.只有相同name的按钮才能够实现多选一 </span><br><span class="line">             2.checked属性被设置为checked，则在一开始该选择就会被选中</span><br><span class="line">             3.maxlength属性规定了输入字段中的字符的最大长度</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;!-- 多选框 --&gt;</span><br><span class="line">        爱好: 1 &lt;input type=&quot;checkbox&quot; name=&quot;&quot;&gt; 2 &lt;input type=&quot;checkbox&quot;&gt; 3 &lt;input type=&quot;checkbox&quot;&gt; &lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 提交 submit 将表单域中所有的值送到后台--&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;样例&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 重置按钮 --&gt;</span><br><span class="line">        &lt;input type=&quot;reset&quot; value=&quot;重新填写&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 普通按钮 button --&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;发送验证码&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>赋值</th></tr></thead><tbody><tr><td>type</td><td>radio,checkbox用于做选择，submit提交，reset重置，button按钮，file文件域</td></tr><tr><td>name</td><td>注明归类，可用于选择标签时归类</td></tr><tr><td>value</td><td>会被传送到后台，供后台人员使用</td></tr></tbody></table><h2 id="08-label标签"><a href="#08-label标签" class="headerlink" title="08 label标签"></a>08 label标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- label 标注 标签，可以使光标点击文字即选中--&gt;</span><br><span class="line">    &lt;label for=&quot;text&quot;&gt;用户名：&lt;/label&gt; </span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;text&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label for=&quot;sex1&quot;&gt;男&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;sex1&quot; name=&quot;sex&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label for=&quot;sex2&quot;&gt;女&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;sex2&quot; name=&quot;sex&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>label 标注 标签，可以使光标点击文字即选中</p><h2 id="09-select下拉标签元素"><a href="#09-select下拉标签元素" class="headerlink" title="09 select下拉标签元素"></a>09 select下拉标签元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;下拉列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 父标签和子标签结构 --&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">    籍贯：</span><br><span class="line">        &lt;select&gt;</span><br><span class="line">            &lt;option&gt;山东&lt;/option&gt;</span><br><span class="line">            &lt;option selected=&quot;selected&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;上海&lt;/option&gt;</span><br><span class="line">            &lt;!-- selected属性默认选定项 --&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意： select 的默认选项设置</p><p>​    </p><h2 id="10-文本域"><a href="#10-文本域" class="headerlink" title="10 文本域"></a>10 文本域</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;文本域&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        今日反馈:</span><br><span class="line">        &lt;textarea clos=&quot;50&quot; rows=&quot;5&quot;&gt;样例&lt;/textarea&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以自主设定文本域的大小。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于HTML的一些常用基础标签&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdown语法整理</title>
    <link href="https://awen123awen.github.io/2022/03/20/markdown%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://awen123awen.github.io/2022/03/20/markdown语法整理/</id>
    <published>2022-03-20T12:55:31.000Z</published>
    <updated>2022-03-25T14:47:18.397Z</updated>
    
    <content type="html"><![CDATA[<p>markdown相关基础语法整理</p><span id="more"></span><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><p>可使用 # 来写标题</p><p>其中#需要加在行首，例如：</p><p>#标题 效果如下</p><h2 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h2><h3 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h3><p>需要注意#与标题之间添加空格。</p><hr><h1 id="2-分割线"><a href="#2-分割线" class="headerlink" title="2.分割线"></a>2.分割线</h1><p>使用三个或以上的 <code>-</code> 或者 <code>*</code> 表示，且这一行只有符号，注意不要被识别为二级标题即可，例如中间或者前面可以加空格。</p><hr><h1 id="3-斜体与粗体"><a href="#3-斜体与粗体" class="headerlink" title="3.斜体与粗体"></a>3.斜体与粗体</h1><p>使用 <code>*</code> 和 <code>**</code> 分别表示斜体和粗体，删除线使用两个 <code>~</code> 表示。</p><p>演示删除线效果 <del>这是我要删除的字呦</del></p><hr><h1 id="4-超链接和图片"><a href="#4-超链接和图片" class="headerlink" title="4.超链接和图片"></a>4.超链接和图片</h1><p>链接和图片的写法类似，图片仅在超链接前多了一个 <code>!</code> ，一般是 [文字描述] (链接)</p><p>比如说你可以通过<a href="https://awen123awen.github.io/">点击我</a>来访问我的博客。</p><p>同样也可以通过</p><p><img src="/.io//simple.jpg" alt="点击我"></p><p>好吧我太错了，我还以为图片和链接是一个样子，原来是直接放原图吗。</p><hr><h1 id="5-无序列表"><a href="#5-无序列表" class="headerlink" title="5. 无序列表"></a>5. 无序列表</h1><p>使用 <code>-</code>、<code>+</code> 和 <code>*</code> 表示无序列表，前后留一行空白，可嵌套，例如</p><ul><li>一层<ul><li>二层</li><li>二层<ul><li>三层<ul><li>四层</li></ul></li></ul></li></ul></li></ul><ul><li>一层</li></ul><hr><h1 id="6-有序列表"><a href="#6-有序列表" class="headerlink" title="6.有序列表"></a>6.有序列表</h1><p>使用 <code>1.</code> （点号后面有个空格）表示有序列表，可嵌套。</p><ol><li><p>一层</p><ol><li>二层</li><li>二层</li></ol></li><li><p>一层</p></li></ol><hr><h1 id="7-文字引用"><a href="#7-文字引用" class="headerlink" title="7. 文字引用"></a>7. 文字引用</h1><p>使用&gt;表示，可以使用多个&gt;，表示层级更深，例如</p><blockquote><p> 这是第一层</p><blockquote><p> 这是第二层</p><p>不会轻易的跳出去</p><blockquote><p>还可以更深</p><p>我超，这怎么出去。</p></blockquote></blockquote><p>多回车几次就好了诶，神奇。</p></blockquote><hr><h1 id="8-行内代码块与代码块"><a href="#8-行内代码块与代码块" class="headerlink" title="8.行内代码块与代码块"></a>8.行内代码块与代码块</h1><p>需要使用切英文使用这个`，和<em>星号使用方法相同</em></p><p><code>这是行内代码块</code></p><p>而代码块则是四个空格缩进表示代码块,需要使用<code>`</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里就是代码块了，哈哈</span><br><span class="line">还能换行</span><br><span class="line">牛蛙</span><br></pre></td></tr></table></figure><h1 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h1><p>第二行的 <code>---:</code> 表示了对齐方式，默认<strong>左对齐</strong>，还有 <strong>右对齐</strong> 和 <strong>居中</strong></p><table><thead><tr><th>商品</th><th style="text-align:right">数量</th><th style="text-align:center">单价</th></tr></thead><tbody><tr><td>苹果</td><td style="text-align:right">10</td><td style="text-align:center">\$1</td></tr><tr><td>电脑</td><td style="text-align:right">1</td><td style="text-align:center">\$1000</td></tr></tbody></table><p>就先记录到这里了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown相关基础语法整理&lt;/p&gt;
    
    </summary>
    
    
      <category term="markdown语法" scheme="https://awen123awen.github.io/tags/markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://awen123awen.github.io/2022/03/20/hello-world/"/>
    <id>https://awen123awen.github.io/2022/03/20/hello-world/</id>
    <published>2022-03-20T03:27:38.469Z</published>
    <updated>2022-03-20T10:26:00.715Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
